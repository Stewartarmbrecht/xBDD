xBDD Core

xBDD - Core - Features - Getting Started
	Define A Basic Scenario
		With Asynchronous Execution [NotRun]
		With Synchronous Execution [Failed]
			Given has the following scenarion definition
				using Microsoft.VisualStudio.TestTools.UnitTesting;
				using xBDD;
				
				//Area
				namespace MyApp.API.Test.Features.Calendar
				{
					//Feature
					[AsA("developer")]
					[YouCan("find the holidays for the users culture in a specific time range")]
					[By("using the operations exposed by the User object's Calendar property")]
					[TestClass]
					// [TestClass] - for MSTest
					// [TestFixture] - for nUnit
					public class GetHolidays
					{
						//Scenario
						// [Fact] - for xUnit
						// [Test] - for nUnit
						public async void WhenUSCalendar()
						{
							await xB.AddScenario(this)
								.Given("a user object for a user with a US culture", (s) => {
									//code to create calendar
								})
								.When("you call GetHolidays with a date range of 3/10/2015 to 3/18/2015", (s) => {
									//code to issue get request.
								})
								.Then("you should get back a single holiday that is St. Patrick's Day", (s) => {
									//code to validate response
								})
								.Run();
						}
					}
				}
			When the scenario is executed
			Then the test run will have the following structure [Failed]
				Area:
				My App - API - Test - Features - Calendar
				
				Feature:
				Get Holidays
				
				Feature Description:
				In order to reference culture specific holidays
				As a developer
				I would like to get a list of the current user's culture specific holidays
				
				Scenario:
				When US Calendar
				
				Steps:
				Given a calendar object is initialized with US holidays
				When you call GetHolidays with a date range of 3/10/2015 to 3/18/2015
				Then you should get back a single holiday that is St. Patrick's Day
				Error Type: AssertFailedException
				   Message: Assert.AreEqual failed. Expected:<to reference culture specific holidays>. Actual:<find the holidays for the users culture in a specific time range>. 
				     Stack:    at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail(String assertionName, String message, Object[] parameters)
				               at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual[T](T expected, T actual, String message, Object[] parameters)
				               at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual[T](T expected, T actual)
				               at xBDD.Core.Features.GettingStarted.DefineABasicScenario.<>c__DisplayClass5_0.<WithSynchronousExecution>b__1(Step s) in C:\Users\stearm01\source\xBDD\core\xBDD.Core.Features\GettingStarted\DefineABasicScenario.cs:line 63
				               at xBDD.Core.StepExecutor.<>c__DisplayClass4_0.<ExecuteStepAsync>b__0() in C:\Users\stearm01\source\xBDD\core\xBDD.Core\Core\StepExecutor.cs:line 25
				               at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)
				            --- End of stack trace from previous location where exception was thrown ---
				               at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)
				            --- End of stack trace from previous location where exception was thrown ---
				               at xBDD.Core.StepExecutor.ExecuteStepAsync(Step step) in C:\Users\stearm01\source\xBDD\core\xBDD.Core\Core\StepExecutor.cs:line 25
	Installing The Framework
		If You Use An MS Test Project
			Given you create an MSTest project by following the directions here:
				https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest
			And you execute the following commands:
				dotnet add package xBDD
			And you install the xBDD nuget package by executing:
				dotnet add package xBDD
			And you modify the default test class to look like:
				...add code.
			When you run the test project using:
				dotnet test -v n
xBDD - Core - Test - Features - Define Scenarios
	Define A Documentation Scenario
		With Synchronous Execution [Failed]
			Given has the following scenarion definition
				using Microsoft.VisualStudio.TestTools.UnitTesting;
				using xBDD;
				
				//Area
				namespace MyApp.API.Test.Features.Calendar
				{
					//Feature
					[AsA("developer")]
					[YouCan("find the holidays for the users culture in a specific time range")]
					[By("using the operations exposed by the User object's Calendar property")]
					[TestClass]
					// [TestClass] - for MSTest
					// [TestFixture] - for nUnit
					public class GetHolidays
					{
						//Scenario
						// [Fact] - for xUnit
						// [Test] - for nUnit
						public async void WhenUSCalendar()
						{
							await xB.AddScenario(this)
								.Given("a user object for a user with a US culture", (s) => {
									//code to create calendar
								})
								.When("you call GetHolidays with a date range of 3/10/2015 to 3/18/2015", (s) => {
									//code to issue get request.
								})
								.Then("you should get back a single holiday that is St. Patrick's Day", (s) => {
									//code to validate response
								})
								.Run();
						}
					}
				}
			When the scenario is executed
			Then the test run will have the following structure [Failed]
				Area:
				My App - Standard Help Desk Technician Features - Getting Started
				
				Feature:
				Installing The Framework
				
				Feature Description:
				As a developer
				You can install the xBDD framework to reference culture specific holidays
				I would like to get a list of the current user's culture specific holidays
				
				Scenario:
				When US Calendar
				
				Steps:
				Given a calendar object is initialized with US holidays
				When you call GetHolidays with a date range of 3/10/2015 to 3/18/2015
				Then you should get back a single holiday that is St. Patrick's Day
				Error Type: AssertFailedException
				   Message: Assert.AreEqual failed. Expected:<My App - Standard Help Desk Technician Features - Getting Started>. Actual:<My App - API - Test - Features - Calendar>. 
				     Stack:    at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail(String assertionName, String message, Object[] parameters)
				               at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual[T](T expected, T actual, String message, Object[] parameters)
				               at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual[T](T expected, T actual)
				               at xBDD.Core.Test.Features.DefineScenarios.DefineADocumentationScenario.<>c__DisplayClass5_0.<WithSynchronousExecution>b__1(Step s) in C:\Users\stearm01\source\xBDD\core\xBDD.Core.Features\GettingStarted\DefineADocumentationScenario.cs:line 61
				               at xBDD.Core.StepExecutor.<>c__DisplayClass4_0.<ExecuteStepAsync>b__0() in C:\Users\stearm01\source\xBDD\core\xBDD.Core\Core\StepExecutor.cs:line 25
				               at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)
				            --- End of stack trace from previous location where exception was thrown ---
				               at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)
				            --- End of stack trace from previous location where exception was thrown ---
				               at xBDD.Core.StepExecutor.ExecuteStepAsync(Step step) in C:\Users\stearm01\source\xBDD\core\xBDD.Core\Core\StepExecutor.cs:line 25
	Define A Scenario With Reusable Steps
		With Asynchronous Execution [NotRun]
		With Synchronous Execution [NotRun]
