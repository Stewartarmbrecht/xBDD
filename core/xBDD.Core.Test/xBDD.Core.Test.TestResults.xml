<?xml version="1.0" encoding="utf-8"?>
<assemblies>
  <assembly name="xBDD.Core.Test.dll" environment="32-bit .NET (unknown version) [collection-per-class, parallel (4 threads)]" test-framework="xUnit.net 2.1.0.3179" run-date="2015-10-27" run-time="22:24:21" total="4" passed="4" failed="0" skipped="0" time="0.758" errors="0">
    <errors />
    <collection total="4" passed="4" failed="0" skipped="0" name="xBDDCoreTest" time="0.038">
      <test name="xBDD.Core.Test.Features.DefineScenarios.DefineABasicScenario.WithAsynchronousExecution" type="xBDD.Core.Test.Features.DefineScenarios.DefineABasicScenario" method="WithAsynchronousExecution" time="0.0292838" result="Pass">
        <output><![CDATA[With Asynchronous Execution
    has the following scenarion definition
        using System.Threading.Tasks;
        using xBDD;

        // The namespace will be converted to an Area name with spaces added 
        // between capitalized words and the periods replaced with 
        // dashes.
        namespace MyApp.API.Test.Features.Accounts
        {
        	// Attributes can be used to define the 
        	// value, actor, and action for the feature
        	[InOrderTo("review the details of a specific account")]
        	[AsA("administrator")]
        	[IWouldLikeTo("be able to get the details of any account from the api by account id")]
        	// The class name will be converted to a feature with 
        	// spaces added between capitalized words
        	public class GetAccountDetails
        	{
        		// The containing method will be used to 
        		// set the scenario name by adding spaces
        		// between the capitalized words and numbers.
        		// Usually this method will be attributed to 
        		// identify it as a unit test that will be run 
        		// by the unit testing framework you are using.
        		public async Task WhenUnauthenticated()
        		{
        			// xB is the static class that provides access to the
        			// current test run.
        			await xB.CurrentRun
        				// AddScenario adds a new scenario to the test run.
        				.AddScenario(this)
        				// Adds a new step to the scenario.  Given, When, Then, and And
        				// all do the same thing.  There are no requirements in how you use them.
        				// The only impact of one versus the other is that the full name for the 
        				// step will start with the Given, When, Then or And based on 
        				// Which one you use.
        				.GivenAsync("the client is not authenticated", async (s) => {
        					//async code to ensure the user session is not authenticated.
        					//await client.logOff();
        					await Task.Run(() => { });
        				})
        				.WhenAsync("the client gets to the account details resource 'http://<site>/api/Accounts/99'", async (s) => {
        					//code to issue get request.
        					//var response = await client.Get('http://<site>/api/Accounts/99');
        					//the line below is just to get the example to compile...
        					await Task.Run(() => { });
        				})
        				.Then("the client should get a 401 response", (s) => {
        					//code to validate response 
        					//no need for asynchronous code here
        				})
        				// To execute the scenario you need to call Run() or RunAsync()
        				// This will execute each step in order that you added them
        				// to the scenario.
        				.Run();
        		}
        	}
        }
    the scenario is excuted
    the test run will have the following structure
        Area:
        My App - API - Test - Features - Accounts

        Feature:
        Get Account Details

        Scenario:
        When Unauthenticated

        Steps:
        Given the client is not authenticated
        When the client gets to the account details resource 'http://<site>/api/Accounts/99'
        Then the client should get a 401 response
]]></output>
      </test>
      <test name="xBDD.Core.Test.Features.DefineScenarios.DefineABasicScenario.WithSynchronousExecution" type="xBDD.Core.Test.Features.DefineScenarios.DefineABasicScenario" method="WithSynchronousExecution" time="0.0042628" result="Pass">
        <output><![CDATA[With Synchronous Execution
    has the following scenarion definition
        using xBDD;

        //Area
        namespace MyApp.API.Test.Features.Calendar
        {
        	//Feature
        	[InOrderTo("to reference culture specific holidays")]
        	[AsA("developer")]
        	[IWouldLikeTo("get a list of the current user's culture specific holidays")]
        	public class GetHolidays
        	{
        		//Scenario
        		public async void WhenUSCalendar()
        		{
        			await xB.CurrentRun
        				.AddScenario(this)
        				.Given("a calendar object is initialized with US holidays", (s) => {
        					//code to create calendar
        				})
        				.When("you call GetHolidays with a date range of 3/10/2015 to 3/18/2015", (s) => {
        					//code to issue get request.
        				})
        				.Then("you should get back a single holiday that is St. Patrick's Day", (s) => {
        					//code to validate response
        				})
        				.Run();
        		}
        	}
        }
    the scenario is executed
    the test run will have the following structure
        Area:
        My App - API - Test - Features - Calendar

        Feature:
        Get Holidays

        Feature Description:
        In order to reference culture specific holidays
        As a developer
        I would like to get a list of the current user's culture specific holidays

        Scenario:
        When US Calendar

        Steps:
        Given a calendar object is initialized with US holidays
        When you call GetHolidays with a date range of 3/10/2015 to 3/18/2015
        Then you should get back a single holiday that is St. Patrick's Day
]]></output>
      </test>
      <test name="xBDD.Core.Test.Features.DefineScenarios.DefineAScenarioWithReusableSteps.WithSynchronousExecution" type="xBDD.Core.Test.Features.DefineScenarios.DefineAScenarioWithReusableSteps" method="WithSynchronousExecution" time="0.0021515" result="Pass">
        <output><![CDATA[With Synchronous Execution
    has the following scenarion definition
        using xBDD;

        //Area
        namespace MyApp.API.Test.Features.Calendar
        {
        	//Feature
        	[InOrderTo("to reference culture specific holidays")]
        	[AsA("developer")]
        	[IWouldLikeTo("get a list of the current user's culture specific holidays")]
        	public class GetHolidays
        	{
        		//Scenario
        		public async void WhenUSCalendar()
        		{
        			await xB.CurrentRun
        				.AddScenario(this)
        				.Given("a calendar object is initialized with US holidays", (s) => {
        					//code to create calendar
        				})
        				.When("you call GetHolidays with a date range of 3/10/2015 to 3/18/2015", (s) => {
        					//code to issue get request.
        				})
        				.Then("you should get back a single holiday that is St. Patrick's Day", (s) => {
        					//code to validate response
        				})
        				.Run();
        		}
        	}
        }
    the scenario is executed
    the test run will have the following structure
        Area:
        My App - API - Test - Features - Calendar

        Feature:
        Get Holidays

        Feature Description:
        In order to reference culture specific holidays
        As a developer
        I would like to get a list of the current user's culture specific holidays

        Scenario:
        When US Calendar

        Steps:
        Given a calendar object is initialized with US holidays
        When you call GetHolidays with a date range of 3/10/2015 to 3/18/2015
        Then you should get back a single holiday that is St. Patrick's Day
]]></output>
      </test>
      <test name="xBDD.Core.Test.Features.DefineScenarios.DefineAScenarioWithReusableSteps.WithAsynchronousExecution" type="xBDD.Core.Test.Features.DefineScenarios.DefineAScenarioWithReusableSteps" method="WithAsynchronousExecution" time="0.0024883" result="Pass">
        <output><![CDATA[With Asynchronous Execution
    has the following scenarion definition
        using System.Threading.Tasks;
        using xBDD;

        // The namespace will be converted to an Area name with spaces added 
        // between capitalized words and the periods replaced with 
        // dashes.
        namespace MyApp.API.Test.Features.Accounts
        {
        	// Attributes can be used to define the 
        	// value, actor, and action for the feature
        	[InOrderTo("review the details of a specific account")]
        	[AsA("administrator")]
        	[IWouldLikeTo("be able to get the details of any account from the api by account id")]
        	// The class name will be converted to a feature with 
        	// spaces added between capitalized words
        	public class GetAccountDetails
        	{
        		// The containing method will be used to 
        		// set the scenario name by adding spaces
        		// between the capitalized words and numbers.
        		// Usually this method will be attributed to 
        		// identify it as a unit test that will be run 
        		// by the unit testing framework you are using.
        		public async Task WhenUnauthenticated()
        		{
        			// xB is the static class that provides access to the
        			// current test run.
        			await xB.CurrentRun
        				// AddScenario adds a new scenario to the test run.
        				.AddScenario(this)
        				// Adds a new step to the scenario.  Given, When, Then, and And
        				// all do the same thing.  There are no requirements in how you use them.
        				// The only impact of one versus the other is that the full name for the 
        				// step will start with the Given, When, Then or And based on 
        				// Which one you use.
        				.GivenAsync("the client is not authenticated", async (s) => {
        					//async code to ensure the user session is not authenticated.
        					//await client.logOff();
        					await Task.Run(() => { });
        				})
        				.WhenAsync("the client gets to the account details resource 'http://<site>/api/Accounts/99'", async (s) => {
        					//code to issue get request.
        					//var response = await client.Get('http://<site>/api/Accounts/99');
        					//the line below is just to get the example to compile...
        					await Task.Run(() => { });
        				})
        				.Then("the client should get a 401 response", (s) => {
        					//code to validate response 
        					//no need for asynchronous code here
        				})
        				// To execute the scenario you need to call Run() or RunAsync()
        				// This will execute each step in order that you added them
        				// to the scenario.
        				.Run();
        		}
        	}
        }
    the scenario is excuted
    the test run will have the following structure
        Area:
        My App - API - Test - Features - Accounts

        Feature:
        Get Account Details

        Scenario:
        When Unauthenticated

        Steps:
        Given the client is not authenticated
        When the client gets to the account details resource 'http://<site>/api/Accounts/99'
        Then the client should get a 401 response
]]></output>
      </test>
    </collection>
  </assembly>
</assemblies>