xBDD Core

xBDD - Core - Test - Features - Define Scenarios
	Define A Basic Scenario
		With Asynchronous Execution
			Given has the following scenarion definition
				using System.Threading.Tasks;
				using xBDD;
				
				// The namespace will be converted to an Area name with spaces added 
				// between capitalized words and the periods replaced with 
				// dashes.
				namespace MyApp.API.Test.Features.Accounts
				{
					// Attributes can be used to define the 
					// value, actor, and action for the feature
					[InOrderTo("review the details of a specific account")]
					[AsA("administrator")]
					[IWouldLikeTo("be able to get the details of any account from the api by account id")]
					// The class name will be converted to a feature with 
					// spaces added between capitalized words
					public class GetAccountDetails
					{
						// The containing method will be used to 
						// set the scenario name by adding spaces
						// between the capitalized words and numbers.
						// Usually this method will be attributed to 
						// identify it as a unit test that will be run 
						// by the unit testing framework you are using.
						public async Task WhenUnauthenticated()
						{
							// xB is the static class that provides access to the
							// current test run.
							await xB.CurrentRun
								// AddScenario adds a new scenario to the test run.
								.AddScenario(this)
								// Adds a new step to the scenario.  Given, When, Then, and And
								// all do the same thing.  There are no requirements in how you use them.
								// The only impact of one versus the other is that the full name for the 
								// step will start with the Given, When, Then or And based on 
								// Which one you use.
								.GivenAsync("the client is not authenticated", async (s) => {
									//async code to ensure the user session is not authenticated.
									//await client.logOff();
									await Task.Run(() => { });
								})
								.WhenAsync("the client gets to the account details resource 'https://<site>/api/Accounts/99'", async (s) => {
									//code to issue get request.
									//var response = await client.Get('https://<site>/api/Accounts/99');
									//the line below is just to get the example to compile...
									await Task.Run(() => { });
								})
								.Then("the client should get a 401 response", (s) => {
									//code to validate response 
									//no need for asynchronous code here
								})
								// To execute the scenario you need to call Run() or RunAsync()
								// This will execute each step in order that you added them
								// to the scenario.
								.Run();
						}
					}
				}
			When the scenario is excuted
			Then the test run will have the following structure
				Area:
				My App - API - Test - Features - Accounts
				
				Feature:
				Get Account Details
				
				Scenario:
				When Unauthenticated
				
				Steps:
				Given the client is not authenticated
				When the client gets to the account details resource 'https://<site>/api/Accounts/99'
				Then the client should get a 401 response
		With Synchronous Execution
			Given has the following scenarion definition
				using xBDD;
				
				//Area
				namespace MyApp.API.Test.Features.Calendar
				{
					//Feature
					[InOrderTo("to reference culture specific holidays")]
					[AsA("developer")]
					[IWouldLikeTo("get a list of the current user's culture specific holidays")]
					public class GetHolidays
					{
						//Scenario
						public async void WhenUSCalendar()
						{
							await xB.CurrentRun
								.AddScenario(this)
								.Given("a calendar object is initialized with US holidays", (s) => {
									//code to create calendar
								})
								.When("you call GetHolidays with a date range of 3/10/2015 to 3/18/2015", (s) => {
									//code to issue get request.
								})
								.Then("you should get back a single holiday that is St. Patrick's Day", (s) => {
									//code to validate response
								})
								.Run();
						}
					}
				}
			When the scenario is executed
			Then the test run will have the following structure
				Area:
				My App - API - Test - Features - Calendar
				
				Feature:
				Get Holidays
				
				Feature Description:
				In order to reference culture specific holidays
				As a developer
				I would like to get a list of the current user's culture specific holidays
				
				Scenario:
				When US Calendar
				
				Steps:
				Given a calendar object is initialized with US holidays
				When you call GetHolidays with a date range of 3/10/2015 to 3/18/2015
				Then you should get back a single holiday that is St. Patrick's Day
	Define A Scenario With Reusable Steps
		With Asynchronous Execution
			Given has the following scenarion definition
				using System.Threading.Tasks;
				using xBDD;
				
				// The namespace will be converted to an Area name with spaces added 
				// between capitalized words and the periods replaced with 
				// dashes.
				namespace MyApp.API.Test.Features.Accounts
				{
					// Attributes can be used to define the 
					// value, actor, and action for the feature
					[InOrderTo("review the details of a specific account")]
					[AsA("administrator")]
					[IWouldLikeTo("be able to get the details of any account from the api by account id")]
					// The class name will be converted to a feature with 
					// spaces added between capitalized words
					public class GetAccountDetails
					{
						// The containing method will be used to 
						// set the scenario name by adding spaces
						// between the capitalized words and numbers.
						// Usually this method will be attributed to 
						// identify it as a unit test that will be run 
						// by the unit testing framework you are using.
						public async Task WhenUnauthenticated()
						{
							// xB is the static class that provides access to the
							// current test run.
							await xB.CurrentRun
								// AddScenario adds a new scenario to the test run.
								.AddScenario(this)
								// Adds a new step to the scenario.  Given, When, Then, and And
								// all do the same thing.  There are no requirements in how you use them.
								// The only impact of one versus the other is that the full name for the 
								// step will start with the Given, When, Then or And based on 
								// Which one you use.
								.GivenAsync("the client is not authenticated", async (s) => {
									//async code to ensure the user session is not authenticated.
									//await client.logOff();
									await Task.Run(() => { });
								})
								.WhenAsync("the client gets to the account details resource 'https://<site>/api/Accounts/99'", async (s) => {
									//code to issue get request.
									//var response = await client.Get('https://<site>/api/Accounts/99');
									//the line below is just to get the example to compile...
									await Task.Run(() => { });
								})
								.Then("the client should get a 401 response", (s) => {
									//code to validate response 
									//no need for asynchronous code here
								})
								// To execute the scenario you need to call Run() or RunAsync()
								// This will execute each step in order that you added them
								// to the scenario.
								.Run();
						}
					}
				}
			When the scenario is excuted
			Then the test run will have the following structure
				Area:
				My App - API - Test - Features - Accounts
				
				Feature:
				Get Account Details
				
				Scenario:
				When Unauthenticated
				
				Steps:
				Given the client is not authenticated
				When the client gets to the account details resource 'https://<site>/api/Accounts/99'
				Then the client should get a 401 response
		With Synchronous Execution
			Given has the following scenarion definition
				using xBDD;
				
				//Area
				namespace MyApp.API.Test.Features.Calendar
				{
					//Feature
					[InOrderTo("to reference culture specific holidays")]
					[AsA("developer")]
					[IWouldLikeTo("get a list of the current user's culture specific holidays")]
					public class GetHolidays
					{
						//Scenario
						public async void WhenUSCalendar()
						{
							await xB.CurrentRun
								.AddScenario(this)
								.Given("a calendar object is initialized with US holidays", (s) => {
									//code to create calendar
								})
								.When("you call GetHolidays with a date range of 3/10/2015 to 3/18/2015", (s) => {
									//code to issue get request.
								})
								.Then("you should get back a single holiday that is St. Patrick's Day", (s) => {
									//code to validate response
								})
								.Run();
						}
					}
				}
			When the scenario is executed
			Then the test run will have the following structure
				Area:
				My App - API - Test - Features - Calendar
				
				Feature:
				Get Holidays
				
				Feature Description:
				In order to reference culture specific holidays
				As a developer
				I would like to get a list of the current user's culture specific holidays
				
				Scenario:
				When US Calendar
				
				Steps:
				Given a calendar object is initialized with US holidays
				When you call GetHolidays with a date range of 3/10/2015 to 3/18/2015
				Then you should get back a single holiday that is St. Patrick's Day
