xBDD Features

xBDD - Features - Generate Reports - Browse Html Report
	Review Area
		Failing
			Given the test results of a single failed scenario
			When you navigate to the test html report with a single failed scenario
			Then you will see the first area name has text 'My Area 1'
			And you will see the first area red badge is visible
			And you will see the first area's feature list that is not expanding or collapsing is not visible because  the area is failing but the Failures Only option was not set to true
		Passing
			Given the test results of a single passing scenario
			When you navigate to the test html report with a single passing scenario
			Then you will see the area title line has text 'My Area 1'
			And you will see the area 1 with green badge is visible
			And you will see the area 1 duration is visible
			And you will see the first area's feature list that is not expanding or collapsing is not visible because  the area is not failing
		Skipped
			Given the test results of a single skipped scenario
			When you navigate to the test html report with a single skipped scenario
			Then you will see the first area name has text 'My Area 1'
			And you will see the first area yellow badge is visible
			And you will see the first area's feature list that is not expanding or collapsing is not visible because  the area is not failing
	Review Area Description
		Collapse [Skipped - Not Started]
		Collapse All [Skipped - Not Started]
		Default Collapsed When More Than5 [Skipped - Not Started]
		Expand [Skipped - Not Started]
		Expand All [Skipped - Not Started]
	Review Area Feature Distribution
		All Failed Feature Stats
			Given the test results of a single failed scenario
			When you navigate to the test html report with a single failed scenario
			And you wait till the area title line is visible
			Then you will see area feature distribution chart is visible
			And you will see area feature distribution failed bar has a heigth of 33%
			And you will see area feature distribution passed bar is not there
			And you will see area feature distribution skipped bar is not there
		All Passing Feature Stats
			Given the test results of a passing full test run
			When you navigate to the test html report with a passing full test run
			And you wait till the area title line is visible
			Then you will see area feature distribution chart is visible
			And you will see area feature distribution passed bar has a heigth of 33%
			And you will see area feature distribution skipped bar is not there
			And you will see area feature distribution failed bar is not there
		All Skipped Feature Stats
			Given the test results of a single skipped scenario
			When you navigate to the test html report with a single skipped scenario
			And you wait till the area title line is visible
			Then you will see area feature distribution chart is visible
			And you will see area feature distribution skipped bar has a heigth of 33%
			And you will see area feature distribution passed bar is not there
			And you will see area feature distribution failed bar is not there
		Failed Skipped And Passing Feature Stats
			Given the test results of a full test run with all outcomes
			When you navigate to the test html report with a full test run with all outcomes
			And you wait till the area title line is visible
			Then you will see area badge and distribution chart is visible
			And you will see area badge and distribution chart has a title attribute of Features
			And you will see area feature distribution chart is visible
			And you will see area feature distribution passed bar has a heigth of 33%
			And you will see area feature distribution skipped bar has a heigth of 33%
			And you will see area feature distribution failed bar has a heigth of 33%
	Review Area Features
		Collapse
			Given the test results of a passing full test run
			When you navigate to the test html report with a passing full test run
			And you wait till the first area name is visible
			And you click the the menu button
			And you click the the expand all areas link
			And you wait till the first area's feature list that is not expanding or collapsing is visible
			And you click the the first area name
			Then you will see the first area's feature list that is not expanding or collapsing is not visible
		Collapse All [Skipped - Not Implemented]
			Given the test results of a passing full test run
			When you navigate to the test html report with a passing full test run
			And you wait till the first area name is visible
			And you click the the menu button
			And you click the the expand all areas link
			And you wait till the first area's feature list that is not expanding or collapsing is visible
			And you wait till the second area's feature list that is not expanding or collapsing is visible
			And you click the the collapse all areas link
			Then you will see the first area's feature list that is not expanding or collapsing is not visible
			And you will see the second area's feature list that is not expanding or collapsing is not visible
		Expand
			Given the test results of a passing full test run
			When you navigate to the test html report with a passing full test run
			And you wait till the first area name is visible
			And you click the the first area name
			Then you will see the first area's feature list that is not expanding or collapsing is visible
		Expand All
			Given the test results of a passing full test run
			When you navigate to the test html report with a passing full test run
			And you wait till the first area name is visible
			And you click the the menu button
			And you click the the expand all areas link
			Then you will see the first area's feature list that is not expanding or collapsing is visible
			And you will see the second area's feature list that is not expanding or collapsing is visible
	Review Area Stats
		Failed Skipped And Passing Feature Stats
			Given the test results of a full test run with all outcomes
			When you navigate to the test html report with a full test run with all outcomes
			And you wait till the area title line is visible
			And you click the the area title line
			Then you will see area feature stats is visible
			And you will see area feature total has text '3'
			And you will see area feature passed count has text '1'
			And you will see area feature skipped count has text '1'
			And you will see area feature failed count has text '1'
			And you will see area feature stats bar chart is visible
			And you will see area feature success bar is visible
			And you will see area feature skipped bar is visible
			And you will see area feature failed bar is visible
		Failed Skipped And Passing Scenario Stats
			Given the test results of a full test run with all outcomes
			When you navigate to the test html report with a full test run with all outcomes
			And you wait till the area title line is visible
			And you click the the area title line
			Then you will see area scenario stats is visible
			And you will see area scenario stats passed count has text '5'
			And you will see area scenario stats skipped count has text '3'
			And you will see area scenario stats failed count has text '1'
			And you will see area scenario stats bar chart is visible
			And you will see area scenario stats success bar is visible
			And you will see area scenario stats skipped bar is visible
			And you will see area scenario stats failed bar is visible
	Review Feature
		Failing
			Given the test results of a single failed scenario
			When you navigate to the test html report with a single failed scenario
			And you click when the area title line is visible
			Then you will see the feature 1 with red badge is visible
			And you will see the feature 1 scenarios is not visible because the Failures Only option was not set to true that would cause the failred feature to automatically expand.
		Passing
			Given the test results of a single passing scenario
			When you navigate to the test html report with a single passing scenario
			And you click when the area title line is visible
			Then you will see the feature name has text 'My Feature 1'
			And you will see the feature 1 with green badge is visible
			And you will see the feature 1 duration is visible
			And you will see the feature 1 scenarios is not visible because none were failing
		Skipped
			Given the test results of a single skipped scenario
			When you navigate to the test html report with a single skipped scenario
			And you click when the area title line is visible
			Then you will see the feature name has text 'My Feature 1'
			And you will see the feature 1 with yellow badge is visible
			And you will see the feature 1 scenarios is not visible because none were failing
	Review Feature Scenario Distribution
		All Failed Scenario Stats
			Given the test results of a single failed scenario
			When you navigate to the test html report with a single failed scenario
			And you click when the area title line is visible
			Then you will see feature scenario distribution chart is visible
			And you will see feature scenario distribution failed bar has a heigth of 100%
			And you will see feature scenario distribution passed bar is not there
			And you will see feature scenario distribution skipped bar is not there
		All Passing Scenario Stats
			Given the test results of a passing full test run
			When you navigate to the test html report with a passing full test run
			And you wait till the area title line is visible
			And you click when the area title line is visible
			Then you will see feature scenario distribution chart is visible
			And you will see feature scenario distribution passed bar has a heigth of 100%
			And you will see feature scenario distribution skipped bar is not there
			And you will see feature scenario distribution failed bar is not there
		All Skipped Scenario Stats
			Given the test results of a single skipped scenario
			When you navigate to the test html report with a single skipped scenario
			And you wait till the area title line is visible
			And you click when the area title line is visible
			Then you will see feature scenario distribution chart is visible
			And you will see feature scenario distribution skipped bar has a heigth of 100%
			And you will see feature scenario distribution passed bar is not there
			And you will see feature scenario distribution failed bar is not there
		Failed Skipped And Passing Scenario Stats
			Given the test results of a full test run with all outcomes
			When you navigate to the test html report with a full test run with all outcomes
			And you click when the area title line is visible
			Then you will see feature badge and distribution chart is visible
			And you will see feature badge and distribution chart has a title attribute of Scenarios
			And you will see feature scenario distribution chart is visible
			And you will see feature scenario distribution passed bar has a heigth of 33%
			And you will see feature scenario distribution skipped bar has a heigth of 33%
			And you will see feature scenario distribution failed bar has a heigth of 33%
	Review Feature Statement
		Collapse
			Given the test results of a single passing scenario
			When you navigate to the test html report with a single passing scenario
			And you click when the area title line is visible
			And you click when the feature 1 statement link is visible
			And you wait till the feature 1 statement is visible
			And you wait 250 milliseconds
			When you click the the feature 1 statement link
			Then you will see the feature 1 statement is not visible
		Collapse All [Skipped - Not Started]
		Collapsed By Default
			Given the test results of a single passing scenario
			When you navigate to the test html report with a single passing scenario
			And you click when the area title line is visible
			Then you will see the feature 1 statement is not visible because the statement is collapsed by default.
		Expand
			Given the test results of a single passing scenario
			When you navigate to the test html report with a single passing scenario
			And you click when the area title line is visible
			And you click when the feature 1 statement link is visible
			Then you will see the feature 1 statement is visible
		Expand All [Skipped - Not Started]
		Full Statement
			Given the test results of a single passing scenario
			When you navigate to the test html report with a single passing scenario
			And you click when the area title line is visible
			And you click when the feature 1 statement link is visible
			Then you will see the feature 1 statement is visible
			And you will see the feature 1 statement has text 'As a actor
You can derive some value
By perform some action'
		No Statement
			Given the test results of a single passing scenario
			When you navigate to the test html report with a single passing scenario
			And you click when the area title line is visible
			And you click when the feature name is visible
			Then you will see the scenario name is visible
			And you will see the feature 1 statement is not there
			And you will see the feature 1 statement link is not there
		Partial Statement
			Given the test results of a single passing scenario
			When you navigate to the test html report with a single passing scenario
			And you click when the area title line is visible
			And you click when the feature 1 statement link is visible
			Then you will see the feature 1 statement is visible
			And you will see the feature 1 statement has text 'As a [Missing!]
You can derive some value
By [Missing!]'
	Review Feature Stats
		Failed Skipped And Passing Scenario Stats
			Given the test results of a full test run with all outcomes
			When you navigate to the test html report with a full test run with all outcomes
			And you click when the area title line is visible
			And you click when the feature badge is visible
			Then you will see feature scenario stats is visible
			And you will see feature scenario stats total is visible
			And you will see feature scenario stats total has text '3'
			And you will see feature scenario stats passed count has text '1'
			And you will see feature scenario stats skipped count has text '1'
			And you will see feature scenario stats failed count has text '1'
			And you will see feature scenario stats bar chart is visible
			And you will see feature scenario stats success bar is visible
			And you will see feature scenario stats skipped bar is visible
			And you will see feature scenario stats failed bar is visible
	Review Scenario
		Failing
			Given the test results of a single failed scenario
			When you navigate to the test html report with a single failed scenario
			And you click when the area title line is visible
			And you click when the feature name is visible
			Then you will see the scenario 1 with red badge is visible
			And you will see the scenario 1 steps is not visible because while the step failed the Failures Only options was not set to true
		Passing
			Given the test results of a single passing scenario
			When you navigate to the test html report with a single passing scenario
			And you click when the area title line is visible
			And you click when the feature name is visible
			Then you will see the scenario 1 with green badge is visible
			And you will see the scenario name is visible
			And you will see the scenario name has text 'My Scenario 1'
			And you will see the scenario 1 steps is not visible because no steps failed
			And you will see the scenario 1 duration is visible
		Skipped
			Given the test results of a single skipped scenario
			When you navigate to the test html report with a single skipped scenario
			And you click when the area title line is visible
			And you click when the feature name is visible
			Then you will see the scenario 1 with yellow badge is visible
			And you will see the scenario 1 steps is not visible because no steps failed
	Review Scenario Stats
		Failed Skipped And Passing Steps Stats
			Given the test results of a full test run with all outcomes
			When you navigate to the test html report with a full test run with all outcomes
			And you click when the area title line is visible
			And you click when the feature name is visible
			Then you will see scenario steps total is visible
			And you will see scenario steps total has text '3'
			And you will see scenario steps total has a title attribute of Steps
	Review Step
		Failing
			Given the test results of a single failed scenario
			When you navigate to the test html report with a single failed scenario
			And you click when the area title line is visible
			And you click when the feature name is visible
			And you click when the scenario name is visible
			Then you will see the step 2 with red badge is visible because the report will be expanded to the failed step
		Passing
			Given the test results of a single passing scenario
			When you navigate to the test html report with a single passing scenario
			And you click when the area title line is visible
			And you click when the feature name is visible
			And you click when the scenario name is visible
			Then you will see the step 1 with green badge is visible
			And you will see the step name has text 'Given my step 1'
		Skipped
			Given the test results of a single skipped scenario
			When you navigate to the test html report with a single skipped scenario
			And you click when the area title line is visible
			And you click when the feature name is visible
			And you click when the scenario name is visible
			Then you will see the step 1 with yellow badge is visible
			And you will see the step name has text 'Given my step 1'
		With Exception
			Given the test results with a failed step with an exception
			When you navigate to the test html report with a failing step with an exception
			And you click when the area title line is visible
			And you click when the feature name is visible
			And you click when the scenario name is visible
			And you click when step error link is visible
			Then you will see exception is visible
			Then you will see exception type is visible
			Then you will see exception message is visible
			Then you will see exception stack trace is visible
		With Inner Exception
			Given the test results with a failed step with an exception
			When you navigate to the test html report with a failing step with a nested exception
			And you click when the area title line is visible
			And you click when the feature name is visible
			And you click when the scenario name is visible
			And you click when step error link is visible
			Then you will see inner exception is visible
			Then you will see inner exception type is visible
			Then you will see inner exception message is visible
			Then you will see inner exception stack trace is visible
	Review Step Exception
		Collapse
			Given the test results with a failed step with an exception
			And you navigate to the test html report with a failing step with an exception
			And you click when the area title line is visible
			And you click when the feature name is visible
			And you click when the scenario name is visible
			When you click when step error link is visible
			And you wait till exception is visible
			And you wait 250 milliseconds
			And you click the step error link
			Then you will see exception is not visible
		Collapse All [Skipped - Not Started]
		Collapsed By Default
			Given the test results with a failed step with an exception
			When you navigate to the test html report with a failing step with an exception
			And you click when the area title line is visible
			And you click when the feature name is visible
			And you click when the scenario name is visible
			Then you will see exception message is not visible because the exception is collapsed by default.
		Expand
			Given the test results with a failed step with an exception
			And you navigate to the test html report with a failing step with an exception
			And you click when the area title line is visible
			And you click when the feature name is visible
			And you click when the scenario name is visible
			When you click when step error link is visible
			Then you will see exception is visible
		Expand All [Skipped - Not Started]
	Review Step Multiline Parameter
		Code [Skipped - Not Started]
		Collapse [Skipped - Not Started]
		Collapse All [Skipped - Not Started]
		Collapsed By Default
			Given the test results of a step with a text formated multiline parameter of
				Here
				 is
				 my
				 input!
			When you navigate to the sample test html report with a step with a multiline parameter
			And you click when the area title line is visible
			And you click when the feature name is visible
			And you click when the scenario name is visible
			Then you will see step input link is visible
		Expand [Skipped - Not Started]
		Expand All [Skipped - Not Started]
		General Text
			Given the test results of a step with a text formated multiline parameter of
				Here
				 is
				 my
				 Input!
			When you navigate to the sample test html report with a step with a multiline parameter
			And you click when the area title line is visible
			And you click when the feature name is visible
			And you click when the scenario name is visible
			And you click when step input link is visible
			Then you will see step input is visible
			And you will see step text input has text 'Here
 is
 my
 Input!'
		Html With Preview [Skipped - Not Started]
	Review Step Output
		Code [Skipped - Not Started]
		Collapse [Skipped - Not Started]
		Collapse All [Skipped - Not Started]
		Collapsed By Default
			Given the test results of a step with a/an text output of 
				Here
				 is
				 my
				 output!
			When you navigate to the test html report with a step with output
			And you click when the area title line is visible
			And you click when the feature name is visible
			And you click when the scenario name is visible
			Then you will see step output link is visible
		Expand [Skipped - Not Started]
		Expand All [Skipped - Not Started]
		General Text
			Given the test results of a step with a/an text output of 
				Here
				 is
				 my
				 output!
			When you navigate to the test html report with a step with output
			And you click when the area title line is visible
			And you click when the feature name is visible
			And you click when the scenario name is visible
			And you click when step output link is visible
			Then you will see step output is visible
			And you will see step text output has text 'Here
 is
 my
 output!'
		Html With Preview [Skipped - Not Started]
	Review Step Stats
		Failed Skipped And Passing Steps Stats
			Given the test results of a full test run with all outcomes
			And you navigate to the test html report with a full test run with all outcomes
			And you click when the area title line is visible
			And you click when the feature name is visible
			And you click when the scenario name is visible
			Then you will see step duration is visible
	Review Test Run
		Empty Test Run
			Given the test results of an empty test run
			When you navigate to the test html report with an empty test run
			Then you will see the test run name is visible
			And you will see the test run name has text 'My Test Run'
			And you are viewing a page with the title 'My Test Run'
			And you will see the test run badge - grey is visible because no scenarios were run
		Failing
			Given the test results of a single failed scenario
			When you navigate to the test html report with a single failed scenario
			Then you will see the test run badge - red is visible
		Passing Test Run
			Given the test results of a single passing scenario
			When you navigate to the test html report with a single passing scenario
			Then you will see the test run badge - green is visible
			And you will see the test run duration is visible
		Passing With Some Skipped
			Given the test results of a single skipped scenario
			When you navigate to the test html report with a single skipped scenario
			Then you will see the test run badge - yellow is visible
	Review Test Run Stats
		Area Stats No Areas
			Given the test results of an empty test run
			When you navigate to the test html report with an empty test run
			Then you will see test run area stats is visible
			And you will see test run area stats total count has text '0'
			And you will see test run area stats total count has a title attribute of Areas
			And you will see test run area stats passed count has text '0'
			And you will see test run area stats skipped count has text '0'
			And you will see test run area stats failed count has text '0'
			And you will see test run area stats empty bar is visible
		Failed Skipped And Passing Area Stats
			Given the test results of a full test run with all outcomes
			When you navigate to the test html report with a full test run with all outcomes
			Then you will see test run area stats is visible
			And you will see test run area stats total count has text '3'
			And you will see test run area stats total count has a title attribute of Areas
			And you will see test run area stats passed count has text '1'
			And you will see test run area stats skipped count has text '1'
			And you will see test run area stats failed count has text '1'
			And you will see test run area stats bar chart is visible
			And you will see test run area stats success bar is visible
			And you will see test run area stats skipped bar is visible
			And you will see test run area stats failed bar is visible
		Failed Skipped And Passing Feature Stats
			Given the test results of a full test run with all outcomes
			When you navigate to the test html report with a full test run with all outcomes
			Then you will see test run feature stats is visible
			And you will see test run feature stats passed count has text '5'
			And you will see test run feature stats skipped count has text '3'
			And you will see test run feature stats failed count has text '1'
			And you will see test run feature stats bar chart is visible
			And you will see test run feature stats success bar is visible
			And you will see test run feature stats skipped bar is visible
			And you will see test run feature stats failed bar is visible
		Failed Skipped And Passing Scenario Stats
			Given the test results of a full test run with all outcomes
			When you navigate to the test html report with a full test run with all outcomes
			Then you will see test run scenario stats is visible
			And you will see test run scenario stats passed count has text '19'
			And you will see test run scenario stats skipped count has text '7'
			And you will see test run scenario stats failed count has text '1'
			And you will see test run scenario stats bar chart is visible
			And you will see test run scenario stats success bar is visible
			And you will see test run scenario stats skipped bar is visible
			And you will see test run scenario stats failed bar is visible
xBDD - Features - Generate Reports - Customize Html Report
	Shorten Area Name
		Matches All Of Area Name
			Given the test results of a single passing scenario set to skip the string 'My Area 1' in the area name
			When you navigate to the test html report with a single passing scenario
			Then you will see the area title line is visible
			And you will see the area title line has text '[Missing! (or Full Name Skipped)]'
		Matches None Of Area Name
			Given the test results of a single passing scenario set to skip the string 'No Match' in the area name
			When you navigate to the test html report with a single passing scenario
			Then you will see the area title line is visible
			And you will see the area title line has text 'My Area 1'
		Matches Start Of Area Name
			Given the test results of a single passing scenario set to skip the string 'My ' in the area name
			When you navigate to the test html report with a single passing scenario
			Then you will see the area title line is visible
			And you will see the area title line has text 'Area 1'
	Sort Test Run Results
		Not Sorted
			Given a sample executed test run that is not sorted
			When you navigate to the sample test html report that is not sorted
			And you click when the area title line is visible
			And you click when the feature name is visible
			Then you will see the feature name has text 'Sample All Outcome Feature' because it was the first feature alphabetically
			And you will see the scenario name has text 'Failed Scenario' because it is the first scenario alphabetically
		Partially Sorted
			Given a sample executed test run that is not sorted
			When you navigate to the sample test html report that is sorted
			And you click when the area title line is visible
			And you click when the feature name is visible
			Then you will see the feature name has text 'Sample Skipped Feature' because it was the second in the feature sort
			And you will see the scenario name has text 'Passing Scenario2' because it was not provided a sort when the scenario was created and was placed after the sorted scenarios
		Sorted
			Given a sample executed test run that is not sorted
			When you navigate to the sample test html report that is sorted
			And you click when the area title line is visible
			And you click when the feature name is visible
			Then you will see the feature name has text 'Sample Passing Feature' because it was the first in the feature sort
			And you will see the scenario name has text 'Passing Scenario3' because it is the first in the feature class definition
	Write Failures Only
		Failing
			Given the test results of a full test run with all outcomes set to only report on failures
			When you navigate to the test html report with a full test run with all outcomes
			Then you will see the step 2 with red badge is visible because the step failed and the report will be expanded to the failed step
		Passing
			Given the test results of a single passing scenario set to report only failures
			When you navigate to the test html report with a single passing scenario
			Then you will see the test run areas list is not there
		Skipped
			Given the test results of a single skipped scenario set to only report on failures
			When you navigate to the test html report with a single skipped scenario
			Then you will see the test run areas list is not there
xBDD - Features - Generate Reports - Generate Html Report
	Write To Html
		Standard Full Report
			Given a completed test run
			When the following code executes 'var report = xBDD.CurrentRun.WriteToHTML()'
			Then the report variable will be a string that contains the entire HTML report that can be written to a file, or sent via email, or whatever...
xBDD - Features - Generate Reports - Generate Text Report
	Write To Text
		Write Emtpy Test Run
			Given you code the following feature definition:
				using System.Threading.Tasks;
				using xBDD.Features;
				namespace xBDD.Features.GenerateReports.GenerateTextReport.WriteToTextScenarios
				{
				    public class EmptyTestRun : IExecute<string>
				    {
				        public async Task<string> Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            return await xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
		Write Run Empty Scenario
			Given you code the following feature definition:
				using System.Threading.Tasks;
				using xBDD.Features;
				namespace xBDD.Features.GenerateReports.GenerateTextReport.WriteToTextScenarios
				{
				    public class RunEmptyScenario : IExecute<string>
				    {
				        public async Task<string> Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            await xBDD.CurrentRun
				                .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                .Run();
				            return await xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario
		Write Run Multiple Areas
			Given you code the following feature definition:
				using System.Threading.Tasks;
				using xBDD.Features;
				namespace xBDD.Features.GenerateReports.GenerateTextReport.WriteToTextScenarios
				{
				    public class RunMultipleAreas : IExecute<string>
				    {
				        public async Task<string> Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature One", "My.Area.Path.One")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature One", "My.Area.Path.One")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature Two", "My.Area.Path.Two")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature Two", "My.Area.Path.Two")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return await xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path.One
					My Feature One
						My Scenario One
							Given my starting condition
							When my action
							Then my ending condition
						My Scenario Two
							Given my starting condition
							When my action
							Then my ending condition
				My.Area.Path.Two
					My Feature Two
						My Scenario One
							Given my starting condition
							When my action
							Then my ending condition
						My Scenario Two
							Given my starting condition
							When my action
							Then my ending condition
		Write Run Multiple Features Same Area
			Given you code the following feature definition:
				using System.Threading.Tasks;
				using xBDD.Features;
				namespace xBDD.Features.GenerateReports.GenerateTextReport.WriteToTextScenarios
				{
				    public class RunMultipleFeaturesSameArea : IExecute<string>
				    {
				        public async Task<string> Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature One", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature One", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature Two", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature Two", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return await xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature One
						My Scenario One
							Given my starting condition
							When my action
							Then my ending condition
						My Scenario Two
							Given my starting condition
							When my action
							Then my ending condition
					My Feature Two
						My Scenario One
							Given my starting condition
							When my action
							Then my ending condition
						My Scenario Two
							Given my starting condition
							When my action
							Then my ending condition
		Write Run Multiple Scenarios Same Feature
			Given you code the following feature definition:
				using System.Threading.Tasks;
				using xBDD.Features;
				namespace xBDD.Features.GenerateReports.GenerateTextReport.WriteToTextScenarios
				{
				    public class RunMultipleScenariosSameFeature : IExecute<string>
				    {
				        public async Task<string> Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return await xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario One
							Given my starting condition
							When my action
							Then my ending condition
						My Scenario Two
							Given my starting condition
							When my action
							Then my ending condition
		Write Run Scenario With Failed Step
			Given you code the following feature definition:
				using System;
				using System.Threading.Tasks;
				using xBDD.Features;
				namespace xBDD.Features.GenerateReports.GenerateTextReport.WriteToTextScenarios
				{
				    public class RunScenarioWithFailedStep : IExecute<string>
				    {
				        public async Task<string> Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action", (s) => { throw new Exception("My Error"); }))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return await xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario [Failed]
							Given my starting condition
							When my action [Failed]
								Error Type: Exception
								   Message: My Error
				{{				     Stack\: .*}}
				{{.*}}/rl
							Then my ending condition [Skipped - Previous Error]
		Write Run Scenario With Not Implemented Step
			Given you code the following feature definition:
				using System;
				using System.Threading.Tasks;
				using xBDD.Features;
				
				namespace xBDD.Features.GenerateReports.GenerateTextReport.WriteToTextScenarios
				{
				    public class RunScenarioWithNotImplementedStep : IExecute<string>
				    {
				        public async Task<string> Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action", (s) => { throw new NotImplementedException(); }))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return await xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario [Failed - Step Not Implemented]
							Given my starting condition
							When my action [Failed - Not Implemented]
							Then my ending condition [Skipped - Previous Error]
		Write Run Scenario With Skipped Step
			Given you code the following feature definition:
				using System.Threading.Tasks;
				using xBDD.Features;
				namespace xBDD.Features.GenerateReports.GenerateTextReport.WriteToTextScenarios
				{
				    public class RunScenarioWithSkippedStep : IExecute<string>
				    {
				        public async Task<string> Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action", (s) => { throw new SkipStepException("Deferred"); }))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return await xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario [Failed - Step Skipped]
							Given my starting condition
							When my action [Skipped - Deferred]
							Then my ending condition [Skipped - Previous Error]
		Write Run Scenario With Step With Multiline Parameter
			Given you code the following feature definition:
				using System.Threading.Tasks;
				using xBDD.Features;
				namespace xBDD.Features.GenerateReports.GenerateTextReport.WriteToTextScenarios
				{
				    public class RunScenarioWithStepWithMultilineParameter : IExecute<string>
				    {
				        public async Task<string> Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            await xBDD.CurrentRun
				                .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                .Given(xBDD.CreateStep("my starting condition with the following", (s) => { }, $"My{System.Environment.NewLine}multiline{System.Environment.NewLine}parameter"))
				                .When(xBDD.CreateStep("my action"))
				                .Then(xBDD.CreateStep("my ending condition"))
				                .Run();
				            return await xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario
							Given my starting condition with the following
								My
								multiline
								parameter
							When my action
							Then my ending condition
		Write Run Scenario With Steps
			Given you code the following feature definition:
				using System.Threading.Tasks;
				using xBDD.Features;
				namespace xBDD.Features.GenerateReports.GenerateTextReport.WriteToTextScenarios
				{
				    public class RunScenarioWithSteps : IExecute<string>
				    {
				        public async Task<string> Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return await xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario
							Given my starting condition
							When my action
							Then my ending condition
		Write Skipped Empty Scenario
			Given you code the following feature definition:
				using System.Threading.Tasks;
				using xBDD.Features;
				namespace xBDD.Features.GenerateReports.GenerateTextReport.WriteToTextScenarios
				{
				    public class SkippedEmptyScenario : IExecute<string>
				    {
				        public async Task<string> Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Skip("Deferred");
				            }
				            catch { }
				            return await xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario [Skipped - Deferred]
		Write Skipped Scenario With Steps
			Given you code the following feature definition:
				using System.Threading.Tasks;
				using xBDD.Features;
				namespace xBDD.Features.GenerateReports.GenerateTextReport.WriteToTextScenarios
				{
				    public class SkippedScenarioWithSteps : IExecute<string>
				    {
				        public async Task<string> Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                await xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Skip("Deferred");
				            }
				            catch { }
				            return await xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario [Skipped - Deferred]
							Given my starting condition
							When my action
							Then my ending condition
xBDD - Features - Getting Started
	Define A Documentation Scenario
		With Synchronous Execution [Failed]
			Given you code the following feature definition:
				using Microsoft.VisualStudio.TestTools.UnitTesting;
				using xBDD;
				
				//Area
				namespace MyApp.API.Test.Features.Calendar
				{
					//Feature
					[AsA("developer")]
					[YouCan("find the holidays for the users culture in a specific time range")]
					[By("using the operations exposed by the User object's Calendar property")]
					[TestClass]
					// [TestClass] - for MSTest
					// [TestFixture] - for nUnit
					public class GetHolidays
					{
						//Scenario
						// [Fact] - for xUnit
						// [Test] - for nUnit
						public async void WhenUSCalendar()
						{
							await xB.AddScenario(this)
								.Given("a user object for a user with a US culture", (s) => {
									//code to create calendar
								})
								.When("you call GetHolidays with a date range of 3/10/2015 to 3/18/2015", (s) => {
									//code to issue get request.
								})
								.Then("you should get back a single holiday that is St. Patrick's Day", (s) => {
									//code to validate response
								})
								.Run();
						}
					}
				}
			When the scenario is executed
			Then the test run will have the following structure [Failed]
				Area:
				My App - Standard Help Desk Technician Features - Getting Started
				
				Feature:
				Installing The Framework
				
				Feature Description:
				As a developer
				You can install the xBDD framework to reference culture specific holidays
				I would like to get a list of the current user's culture specific holidays
				
				Scenario:
				When US Calendar
				
				Steps:
				Given a calendar object is initialized with US holidays
				When you call GetHolidays with a date range of 3/10/2015 to 3/18/2015
				Then you should get back a single holiday that is St. Patrick's Day
				Error Type: AssertFailedException
				   Message: Assert.AreEqual failed. Expected:<My App - Standard Help Desk Technician Features - Getting Started>. Actual:<My App - API - Test - Features - Calendar>. 
				     Stack:    at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail(String assertionName, String message, Object[] parameters)
				               at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual[T](T expected, T actual, String message, Object[] parameters)
				               at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual[T](T expected, T actual)
				               at xBDD.Features.GettingStarted.DefineADocumentationScenario.<>c__DisplayClass5_0.<WithSynchronousExecution>b__1(Step s) in C:\Users\stearm01\source\xBDD\xBDD.Features\GettingStarted\DefineADocumentationScenario.cs:line 61
				               at xBDD.Core.StepExecutor.<>c__DisplayClass4_0.<ExecuteStepAsync>b__0() in c:\Users\stearm01\source\xBDD\xBDD\Core\StepExecutor.cs:line 25
				               at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)
				            --- End of stack trace from previous location where exception was thrown ---
				               at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)
				            --- End of stack trace from previous location where exception was thrown ---
				               at xBDD.Core.StepExecutor.ExecuteStepAsync(Step step) in c:\Users\stearm01\source\xBDD\xBDD\Core\StepExecutor.cs:line 25
	Define A Scenario With Reusable Steps
		With Asynchronous Execution [Failed]
			Given you code the following feature definition:
				Exception encountered getting file content: Could not find file 'C:\Users\stearm01\source\xBDD\xBDD.Features\GettingStarted\SampleCode\GetAccountDetails.cs'.
			When the scenario is excuted
			Then the test run will have the following structure [Failed]
				Area:
				My App - API - Test - Features - Accounts
				
				Feature:
				Get Account Details
				
				Scenario:
				When Unauthenticated
				
				Steps:
				Given the client is not authenticated
				When the client gets to the account details resource 'https://<site>/api/Accounts/99'
				Then the client should get a 401 response
				Error Type: AssertFailedException
				   Message: Assert.AreEqual failed. Expected:<My App - API - Test - Features - Accounts>. Actual:<My App - Features - Help Desk Technician - Access User Account Information>. 
				     Stack:    at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail(String assertionName, String message, Object[] parameters)
				               at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual[T](T expected, T actual, String message, Object[] parameters)
				               at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual[T](T expected, T actual)
				               at xBDD.Features.GettingStarted.DefineAScenarioWithReusableSteps.<>c__DisplayClass3_0.<WithAsynchronousExecution>b__1(Step s) in C:\Users\stearm01\source\xBDD\xBDD.Features\GettingStarted\DefineAScenarioWithReusableSteps.cs:line 109
				               at xBDD.Core.StepExecutor.<>c__DisplayClass4_0.<ExecuteStepAsync>b__0() in c:\Users\stearm01\source\xBDD\xBDD\Core\StepExecutor.cs:line 25
				               at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)
				            --- End of stack trace from previous location where exception was thrown ---
				               at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)
				            --- End of stack trace from previous location where exception was thrown ---
				               at xBDD.Core.StepExecutor.ExecuteStepAsync(Step step) in c:\Users\stearm01\source\xBDD\xBDD\Core\StepExecutor.cs:line 25
		With Synchronous Execution [Failed]
			Given you code the following feature definition:
				Exception encountered getting file content: Could not find a part of the path 'C:\Users\stearm01\source\xBDD\xBDD.Features\Features\DefineScenarios\SampleCode\GetHolidays.cs'.
			When the scenario is executed
			Then the test run will have the following structure [Failed]
				Area:
				My App - API - Test - Features - Calendar
				
				Feature:
				Get Holidays
				
				Feature Description:
				In order to reference culture specific holidays
				As a developer
				I would like to get a list of the current user's culture specific holidays
				
				Scenario:
				When US Calendar
				
				Steps:
				Given a calendar object is initialized with US holidays
				When you call GetHolidays with a date range of 3/10/2015 to 3/18/2015
				Then you should get back a single holiday that is St. Patrick's Day
				Error Type: AssertFailedException
				   Message: Assert.AreEqual failed. Expected:<to reference culture specific holidays>. Actual:<find the holidays for the users culture in a specific time range>. 
				     Stack:    at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail(String assertionName, String message, Object[] parameters)
				               at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual[T](T expected, T actual, String message, Object[] parameters)
				               at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual[T](T expected, T actual)
				               at xBDD.Features.GettingStarted.DefineAScenarioWithReusableSteps.<>c__DisplayClass2_0.<WithSynchronousExecution>b__1(Step s) in C:\Users\stearm01\source\xBDD\xBDD.Features\GettingStarted\DefineAScenarioWithReusableSteps.cs:line 64
				               at xBDD.Core.StepExecutor.<>c__DisplayClass4_0.<ExecuteStepAsync>b__0() in c:\Users\stearm01\source\xBDD\xBDD\Core\StepExecutor.cs:line 25
				               at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)
				            --- End of stack trace from previous location where exception was thrown ---
				               at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)
				            --- End of stack trace from previous location where exception was thrown ---
				               at xBDD.Core.StepExecutor.ExecuteStepAsync(Step step) in c:\Users\stearm01\source\xBDD\xBDD\Core\StepExecutor.cs:line 25
	Executing Your First Scenario
		Running A Failing Web UI Test
			Given you code the following feature definition:
				namespace Amazon.Features.SearchingProducts
				{
				    using Microsoft.VisualStudio.TestTools.UnitTesting;
				    using System;
				    using System.Threading.Tasks;
				    using xBDD;
				    using xBDD.Browser;
				
					[TestClass]
					[AsA("anonymous user")]
					[YouCan("search across all amazon products")]
					[By("using primary search bar on the home page")]
					public class SearchingAllProducts_Failing: IFeature
					{
						private User you = new User();
						public IOutputWriter OutputWriter { get; private set; }
				
						public SearchingAllProducts_Failing()
						{
							OutputWriter = new TestContextWriter();
						}
						
						[TestMethod]
						public async Task SearchWithSearchButton_Failing()
						{
							await xB.AddScenario(this)
								.Given(you.NavigateTo("the amazon home page","https://www.amazon.com"))
								.When(you.EnterTheText("echo").In("the search box", "#twotabsearchtextbox"))
								.And(you.Click("the search button", "input[type=submit]"))
								.Then(you.WillSee("the search results section", "#BAD_SELECTOR").IsVisible())
								.Run();
						}
					}
				}
			When you run the MS Test Project with the following command:
				dotnet test --filter Name~SearchWithSearchButton_Failing
			Then you will see the output matches this template (See TemplateValidator project on Nuget):
				{{.*}}/rl
				Failed   SearchWithSearchButton_Failing
				Error Message:
				 Test method Amazon.Features.SearchingProducts.SearchingAllProducts_Failing.SearchWithSearchButton_Failing threw exception: 
				xBDD.StepException: The step 'you will see the search results section is visible' threw a 'Exception' exception with a message: 'The web element (the search results section - #BAD_SELECTOR) was not found.'. See the inner exception for details. ---> System.Exception: The web element (the search results section - #BAD_SELECTOR) was not found.
				Stack Trace:
				{{.*}}/rl
				
				Standard Output Messages:
				 Search With Search Button Failing
				     Given you navigate to the amazon home page
				     When you enter the text 'echo' into the the search box input
				     And you click the the search button
				     Then you will see the search results section is visible
				 
				
				Debug Trace:
				{{        Created ChromeDriver \(\d+ms\)}}
				{{         Loading Page \(\d+ms\): https\://www\.amazon\.com}}
				{{         WaitTillVisible \(\d+ms\): \#twotabsearchtextbox}}
				{{         SendKeys 'echo' \(\d+ms\): \#twotabsearchtextbox}}
				{{         WaitTillVisible \(\d+ms\): input\[type\=submit\]}}
				{{         Click \(\d+ms\): input\[type\=submit\]}}
				{{         GetPageSource \(\d+ms\)}}
				{{.*}}/rl
		Running A Success Web UI Test
			Given you code the following feature definition:
				namespace Amazon.Features.SearchingProducts
				{
				    using Microsoft.VisualStudio.TestTools.UnitTesting;
				    using System;
				    using System.Threading.Tasks;
				    using xBDD;
				    using xBDD.Browser;
				
					[TestClass]
					[AsA("anonymous user")]
					[YouCan("search across all amazon products")]
					[By("using primary search bar on the home page")]
					public class SearchingAllProducts: IFeature
					{
						private User you = new User();
						public IOutputWriter OutputWriter { get; private set; }
				
						public SearchingAllProducts()
						{
							OutputWriter = new TestContextWriter();
						}
						
						[TestMethod]
						public async Task SearchWithSearchButton()
						{
							await xB.AddScenario(this)
								.Given(you.NavigateTo("the amazon home page","https://www.amazon.com"))
								.When(you.EnterTheText("echo").In("the search box", "#twotabsearchtextbox"))
								.And(you.Click("the search button", "input[type=submit]"))
								.Then(you.WillSee("the search results section", "#s-results-list-atf").IsVisible())
								.Run();
						}
					}
				}
			When you run the MS Test Project with the following command:
				dotnet test -v n --filter FullyQualifiedName=Amazon.Features.SearchingProducts.SearchingAllProducts.SearchWithSearchButton
			Then you will see the output matches this template (See TemplateValidator project on Nuget):
				{{.*}}/rl
				Passed   SearchWithSearchButton
				{{.*}}/rl
				Test Run Successful.
				{{.*}}/rl
	Finding Thex BDD Project Site
		Search For XBDD
			Given you navigate to the google search page
			When you enter the text 'xBDD C#' into the the search box input
			Then you will see the first results has text 'GitHub - Stewartarmbrecht/xBDD: Behavior Driven Development ...'
	Installing The Framework
		For An N Unit Project [Skipped - Not Started]
		For An Xunit Project [Skipped - Not Started]
		If You Use An MS Test Project
			Then you create an MSTest project by following the directions here: https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest
			And you can install xBDD by executing:
				dotnet add package xBDD
