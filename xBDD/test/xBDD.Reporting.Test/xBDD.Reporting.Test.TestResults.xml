<?xml version="1.0" encoding="utf-8"?>
<assemblies>
  <assembly name="xBDD.Reporting.Test.dll" environment="32-bit .NET (unknown version) [collection-per-class, parallel (4 threads)]" test-framework="xUnit.net 2.1.0.3168" run-date="2015-10-07" run-time="22:33:14" total="92" passed="92" failed="0" skipped="0" time="18.424" errors="0">
    <errors />
    <collection total="92" passed="92" failed="0" skipped="0" name="xBDDReportingTest" time="13.760">
      <test name="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport.ViewRunStepWithMultilineParameterOfText" type="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport" method="ViewRunStepWithMultilineParameterOfText" time="0.0130694" result="Pass">
        <traits>
          <trait name="category" value="current" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport.ViewPassingScenario" type="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport" method="ViewPassingScenario" time="0.0004048" result="Pass">
        <traits>
          <trait name="category" value="current" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport.ViewEmptyTestRun" type="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport" method="ViewEmptyTestRun" time="3.5608076" result="Pass">
        <traits>
          <trait name="category" value="current" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport.ViewRunScenario" type="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport" method="ViewRunScenario" time="0.0005295" result="Pass">
        <traits>
          <trait name="category" value="current" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunMultipleFeaturesSameArea" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunMultipleFeaturesSameArea" time="0.0256531" result="Pass">
        <output><![CDATA[Write Run Multiple Features Same Area
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunMultipleFeaturesSameArea : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature One", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature One", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature Two", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature Two", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature One
        		My Scenario One
        			Given my starting condition
        			When my action
        			Then my ending condition
        		My Scenario Two
        			Given my starting condition
        			When my action
        			Then my ending condition
        	My Feature Two
        		My Scenario One
        			Given my starting condition
        			When my action
        			Then my ending condition
        		My Scenario Two
        			Given my starting condition
        			When my action
        			Then my ending condition
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunEmptyScenario" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunEmptyScenario" time="0.003482" result="Pass">
        <output><![CDATA[Write Run Empty Scenario
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunEmptyScenario : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    xBDD.CurrentRun
                        .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                        .Run();
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunScenarioWithSkippedStep" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunScenarioWithSkippedStep" time="0.0027669" result="Pass">
        <output><![CDATA[Write Run Scenario With Skipped Step
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunScenarioWithSkippedStep : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action", (s) => { throw new SkipStepException("Deferred"); }))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario [Failed - Step Skipped]
        			Given my starting condition
        			When my action [Skipped - Deferred]
        			Then my ending condition [Skipped - Previous Error]
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunScenarioWithNotImplementedStep" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunScenarioWithNotImplementedStep" time="0.0021572" result="Pass">
        <output><![CDATA[Write Run Scenario With Not Implemented Step
    the following method
        using System;
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunScenarioWithNotImplementedStep : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action", (s) => { throw new NotImplementedException(); }))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario [Failed - Step Not Implemented]
        			Given my starting condition
        			When my action [Failed - Not Implemented]
        			Then my ending condition [Skipped - Previous Error]
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteSkippedEmptyScenario" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteSkippedEmptyScenario" time="0.0012106" result="Pass">
        <output><![CDATA[Write Skipped Empty Scenario
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class SkippedEmptyScenario : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Skip("Deferred");
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario [Skipped - Deferred]
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunMultipleScenariosSameFeature" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunMultipleScenariosSameFeature" time="0.0015341" result="Pass">
        <output><![CDATA[Write Run Multiple Scenarios Same Feature
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunMultipleScenariosSameFeature : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario One
        			Given my starting condition
        			When my action
        			Then my ending condition
        		My Scenario Two
        			Given my starting condition
        			When my action
        			Then my ending condition
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteEmtpyTestRun" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteEmtpyTestRun" time="0.0011153" result="Pass">
        <output><![CDATA[Write Emtpy Test Run
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class EmptyTestRun : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteSkippedScenarioWithSteps" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteSkippedScenarioWithSteps" time="0.0012787" result="Pass">
        <output><![CDATA[Write Skipped Scenario With Steps
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class SkippedScenarioWithSteps : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Skip("Deferred");
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario [Skipped - Deferred]
        			Given my starting condition
        			When my action
        			Then my ending condition
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunScenarioWithFailedStep" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunScenarioWithFailedStep" time="0.0040609" result="Pass">
        <output><![CDATA[Write Run Scenario With Failed Step
    the following method
        using System;
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunScenarioWithFailedStep : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action", (s) => { throw new Exception("My Error"); }))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario [Failed]
        			Given my starting condition
        			When my action [Failed]
        				Error Type: Exception
        				   Message: My Error
        {{				     Stack\: .*}}
        {{.*}}/rl
        			Then my ending condition [Skipped - Previous Error]
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunScenarioWithStepWithMultilineParameter" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunScenarioWithStepWithMultilineParameter" time="0.0026149" result="Pass">
        <output><![CDATA[Write Run Scenario With Step With Multiline Parameter
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunScenarioWithStepWithMultilineParameter : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    xBDD.CurrentRun
                        .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                        .Given(xBDD.CreateStep("my starting condition with the following", (s) => { }, "My\r\nmultiline\r\nparameter"))
                        .When(xBDD.CreateStep("my action"))
                        .Then(xBDD.CreateStep("my ending condition"))
                        .Run();
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario
        			Given my starting condition with the following
        				My
        				multiline
        				parameter
        			When my action
        			Then my ending condition
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunScenarioWithSteps" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunScenarioWithSteps" time="0.0017592" result="Pass">
        <output><![CDATA[Write Run Scenario With Steps
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunScenarioWithSteps : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario
        			Given my starting condition
        			When my action
        			Then my ending condition
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunMultipleAreas" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunMultipleAreas" time="0.001977" result="Pass">
        <output><![CDATA[Write Run Multiple Areas
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunMultipleAreas : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature One", "My.Area.Path.One")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature One", "My.Area.Path.One")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature Two", "My.Area.Path.Two")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature Two", "My.Area.Path.Two")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path.One
        	My Feature One
        		My Scenario One
        			Given my starting condition
        			When my action
        			Then my ending condition
        		My Scenario Two
        			Given my starting condition
        			When my action
        			Then my ending condition
        My.Area.Path.Two
        	My Feature Two
        		My Scenario One
        			Given my starting condition
        			When my action
        			Then my ending condition
        		My Scenario Two
        			Given my starting condition
        			When my action
        			Then my ending condition
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.WriteToHtml.GetString" type="xBDD.Reporting.Test.Features.ViewHtmlReport.WriteToHtml" method="GetString" time="0.0011175" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewArea.Passing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewArea" method="Passing" time="0.0002809" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewArea.Mulitple" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewArea" method="Mulitple" time="0.0001231" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewArea.Failing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewArea" method="Failing" time="0.0001163" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewArea.Single" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewArea" method="Single" time="0.1183508" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewArea.Skipped" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewArea" method="Skipped" time="0.0001315" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFailureOnly.SingleScenario" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFailureOnly" method="SingleScenario" time="0.0002162" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFailureOnly.SingleAreaMultipleFeatures" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFailureOnly" method="SingleAreaMultipleFeatures" time="0.0001067" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFailureOnly.SingleFeatureMultipleScenarios" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFailureOnly" method="SingleFeatureMultipleScenarios" time="0.0000744" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFailureOnly.MultipleAreas" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFailureOnly" method="MultipleAreas" time="0.0000779" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeature.Description" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeature" method="Description" time="0.0001718" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeature.Skipped" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeature" method="Skipped" time="0.0000802" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeature.Failing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeature" method="Failing" time="0.0000767" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeature.Name" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeature" method="Name" time="0.0000729" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeature.Passing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeature" method="Passing" time="0.5414138" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenario.Skipped" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenario" method="Skipped" time="0.0002538" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenario.Failing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenario" method="Failing" time="0.0000862" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenario.Name" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenario" method="Name" time="0.0000855" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenario.Passing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenario" method="Passing" time="0.9959632" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenario.Description" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenario" method="Description" time="0.0002409" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStep.Single" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStep" method="Single" time="0.0002648" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStep.Mulitple" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStep" method="Mulitple" time="0.0001307" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStep.WithInnerException" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStep" method="WithInnerException" time="0.1626186" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStep.WithException" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStep" method="WithException" time="0.157053" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStep.Passing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStep" method="Passing" time="0.0001854" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStep.Failing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStep" method="Failing" time="0.000117" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStep.Skipped" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStep" method="Skipped" time="0.0001117" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStepOutput.HtmlWithPreview" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStepOutput" method="HtmlWithPreview" time="0.0002318" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStepOutput.Code" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStepOutput" method="Code" time="0.0001131" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStepOutput.CollapsedByDefault" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStepOutput" method="CollapsedByDefault" time="1.3022872" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStepOutput.GeneralText" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewStepOutput" method="GeneralText" time="1.9691788" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRun.Failing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRun" method="Failing" time="0.1064662" result="Pass">
        <output><![CDATA[testrun-name text-danger
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRun.EmptyTestRun" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRun" method="EmptyTestRun" time="0.0731114" result="Pass">
        <output><![CDATA[testrun-name text-muted
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRun.PassingTestRun" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRun" method="PassingTestRun" time="0.0570578" result="Pass">
        <output><![CDATA[testrun-name text-success
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRun.PassingWithSomeSkipped" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRun" method="PassingWithSomeSkipped" time="0.0634487" result="Pass">
        <output><![CDATA[testrun-name text-warning
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewAreaStats.AllPassing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewAreaStats" method="AllPassing" time="0.0002082" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewAreaStats.AllFailed" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewAreaStats" method="AllFailed" time="0.0000907" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewAreaStats.FailedSkippedAndPassingStepsStats" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewAreaStats" method="FailedSkippedAndPassingStepsStats" time="0.254288" result="Pass">
        <traits>
          <trait name="category" value="now" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewAreaStats.AllSkipped" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewAreaStats" method="AllSkipped" time="0.0001816" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewAreaStats.FailedSkippedAndPassingScenarioStats" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewAreaStats" method="FailedSkippedAndPassingScenarioStats" time="0.3153818" result="Pass">
        <traits>
          <trait name="category" value="now" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewAreaStats.FailedSkippedAndPassingFeatureStats" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewAreaStats" method="FailedSkippedAndPassingFeatureStats" time="0.2611243" result="Pass">
        <traits>
          <trait name="category" value="now" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeatureStats.FailedSkippedAndPassingScenarioStats" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeatureStats" method="FailedSkippedAndPassingScenarioStats" time="0.2837634" result="Pass">
        <traits>
          <trait name="category" value="now" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeatureStats.FailedSkippedAndPassingStepsStats" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeatureStats" method="FailedSkippedAndPassingStepsStats" time="0.2474074" result="Pass">
        <traits>
          <trait name="category" value="now" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeatureStats.AllSkipped" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeatureStats" method="AllSkipped" time="0.000147" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeatureStats.AllPassing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeatureStats" method="AllPassing" time="0.0001193" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeatureStats.AllFailed" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewFeatureStats" method="AllFailed" time="0.0000927" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenarioStats.FailedSkippedAndPassingStepsStats" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenarioStats" method="FailedSkippedAndPassingStepsStats" time="0.2802631" result="Pass">
        <traits>
          <trait name="category" value="now" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenarioStats.AllSkipped" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenarioStats" method="AllSkipped" time="0.0001888" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenarioStats.AllFailed" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenarioStats" method="AllFailed" time="0.0001208" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenarioStats.AllPassing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewScenarioStats" method="AllPassing" time="0.0000843" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRunStats.FailedSkippedAndPassingScenarioStats" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRunStats" method="FailedSkippedAndPassingScenarioStats" time="0.2693824" result="Pass">
        <traits>
          <trait name="category" value="now" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRunStats.AllSkipped" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRunStats" method="AllSkipped" time="0.0001892" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRunStats.AllFailed" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRunStats" method="AllFailed" time="0.0001178" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRunStats.AllPassing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRunStats" method="AllPassing" time="0.0001288" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRunStats.FailedSkippedAndPassingAreaStats" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRunStats" method="FailedSkippedAndPassingAreaStats" time="0.2689176" result="Pass">
        <traits>
          <trait name="category" value="now" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRunStats.FailedSkippedAndPassingStepsStats" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRunStats" method="FailedSkippedAndPassingStepsStats" time="0.2488508" result="Pass">
        <traits>
          <trait name="category" value="now" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRunStats.FailedSkippedAndPassingFeatureStats" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewTestRunStats" method="FailedSkippedAndPassingFeatureStats" time="0.2962772" result="Pass">
        <traits>
          <trait name="category" value="now" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreas.CollapseAll" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreas" method="CollapseAll" time="0.0021523" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreas.Collapse" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreas" method="Collapse" time="0.8253982" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreas.ExpandAll" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreas" method="ExpandAll" time="0.5891587" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreas.Expand" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreas" method="Expand" time="0.4391188" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreaDescription.CollapseAll" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreaDescription" method="CollapseAll" time="0.0002136" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreaDescription.Collapse" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreaDescription" method="Collapse" time="0.0000859" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreaDescription.ExpandAll" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreaDescription" method="ExpandAll" time="0.0000805" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreaDescription.Expand" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreaDescription" method="Expand" time="0.0000775" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreaDescription.DefaultCollapsedWhenMoreThan5" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandAreaDescription" method="DefaultCollapsedWhenMoreThan5" time="0.0000779" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandException.DefaultCollapsedWhenMoreThan5" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandException" method="DefaultCollapsedWhenMoreThan5" time="0.0001713" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandException.Expand" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandException" method="Expand" time="0.0000824" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandException.CollapseAll" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandException" method="CollapseAll" time="0.0000817" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandException.ExpandAll" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandException" method="ExpandAll" time="0.0000775" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandException.Collapse" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandException" method="Collapse" time="0.0000741" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandOutput.DefaultCollapsedWhenMoreThan5" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandOutput" method="DefaultCollapsedWhenMoreThan5" time="0.0001743" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandOutput.ExpandAll" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandOutput" method="ExpandAll" time="0.0000828" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandOutput.Collapse" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandOutput" method="Collapse" time="0.0000786" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandOutput.CollapseAll" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandOutput" method="CollapseAll" time="0.0000759" result="Pass" />
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandOutput.Expand" type="xBDD.Reporting.Test.Features.ViewHtmlReport.CollapsingAndExpanding.CollapseAndExpandOutput" method="Expand" time="0.0000725" result="Pass" />
    </collection>
  </assembly>
</assemblies>