<?xml version="1.0" encoding="utf-8"?>
<assemblies>
  <assembly name="xBDD.Reporting.Test.dll" environment="32-bit .NET (unknown version) [collection-per-class, parallel (4 threads)]" test-framework="xUnit.net 2.1.0.3168" run-date="2015-09-30" run-time="12:27:14" total="36" passed="36" failed="0" skipped="0" time="7.131" errors="0">
    <errors />
    <collection total="36" passed="36" failed="0" skipped="0" name="xBDDReportingTest" time="2.655">
      <test name="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport.ViewRunStepWithMultilineParameterOfText" type="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport" method="ViewRunStepWithMultilineParameterOfText" time="0.0130074" result="Pass">
        <traits>
          <trait name="category" value="current" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport.ViewPassingScenario" type="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport" method="ViewPassingScenario" time="0.0004257" result="Pass">
        <traits>
          <trait name="category" value="current" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport.ViewEmptyTestRun" type="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport" method="ViewEmptyTestRun" time="2.3745726" result="Pass">
        <traits>
          <trait name="category" value="current" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport.ViewRunScenario" type="xBDD.Reporting.Test.Features.WriteResults.BrowseHtmlReport" method="ViewRunScenario" time="0.000358" result="Pass">
        <traits>
          <trait name="category" value="current" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml.WriteSkippedScenarioWithSteps" type="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml" method="WriteSkippedScenarioWithSteps" time="0.0203266" result="Pass">
        <output><![CDATA[Write Skipped Scenario With Steps
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
        {
            public class SkippedScenarioWithSteps : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Skip("Deferred");
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToHtml();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>My Test Run</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
            <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
            <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
            <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
            <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
        </head>
        <body class="container-fluid">
            <h1 class="testrun-name text-warning">My Test Run</h1>
            <ol class="areas">
                <li class="area">
                    <h2>My.Area.Path</h2>
                    <ol class="features">
                        <li class="feature">
                            <h3>My Feature</h3>
                            <ol class="scenarios">
                                <li class="scenario skipped bg-warning">
                                    <h4 class="text-warning">My Scenario [Skipped - Deferred]</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step skipped text-warning">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step skipped text-warning">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step skipped text-warning">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
            </ol>
        </body>
        </html>
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml.WriteRunMultipleFeaturesSameArea" type="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml" method="WriteRunMultipleFeaturesSameArea" time="0.0023971" result="Pass">
        <output><![CDATA[Write Run Multiple Features Same Area
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
        {
            public class RunMultipleFeaturesSameArea : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature One", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature One", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature Two", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature Two", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToHtml();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>My Test Run</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
            <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
            <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
            <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
            <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
        </head>
        <body class="container-fluid">
            <h1 class="testrun-name text-success">My Test Run</h1>
            <ol class="areas">
                <li class="area">
                    <h2>My.Area.Path</h2>
                    <ol class="features">
                        <li class="feature">
                            <h3>My Feature One</h3>
                            <ol class="scenarios">
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario One</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario Two</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                            </ol>
                        </li>
                        <li class="feature">
                            <h3>My Feature Two</h3>
                            <ol class="scenarios">
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario One</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario Two</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
            </ol>
        </body>
        </html>
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml.WriteRunMultipleWriteToHtmlScenariosSameFeature" type="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml" method="WriteRunMultipleWriteToHtmlScenariosSameFeature" time="0.0014577" result="Pass">
        <output><![CDATA[Write Run Multiple Write To Html Scenarios Same Feature
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
        {
            public class RunMultipleScenariosSameFeature : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToHtml();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>My Test Run</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
            <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
            <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
            <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
            <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
        </head>
        <body class="container-fluid">
            <h1 class="testrun-name text-success">My Test Run</h1>
            <ol class="areas">
                <li class="area">
                    <h2>My.Area.Path</h2>
                    <ol class="features">
                        <li class="feature">
                            <h3>My Feature</h3>
                            <ol class="scenarios">
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario One</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario Two</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
            </ol>
        </body>
        </html>
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml.WriteSkippedEmptyScenario" type="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml" method="WriteSkippedEmptyScenario" time="0.0029212" result="Pass">
        <output><![CDATA[Write Skipped Empty Scenario
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
        {
            public class SkippedEmptyScenario : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Skip("Deferred");
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToHtml();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>My Test Run</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
            <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
            <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
            <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
            <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
        </head>
        <body class="container-fluid">
            <h1 class="testrun-name text-warning">My Test Run</h1>
            <ol class="areas">
                <li class="area">
                    <h2>My.Area.Path</h2>
                    <ol class="features">
                        <li class="feature">
                            <h3>My Feature</h3>
                            <ol class="scenarios">
                                <li class="scenario skipped bg-warning">
                                    <h4 class="text-warning">My Scenario [Skipped - Deferred]</h4>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
            </ol>
        </body>
        </html>
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml.WriteRunScenarioWithStepWithMultilineParameterWithHtmlFormattingAndPreview" type="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml" method="WriteRunScenarioWithStepWithMultilineParameterWithHtmlFormattingAndPreview" time="0.003325" result="Pass">
        <output><![CDATA[Write Run Scenario With Step With Multiline Parameter With Html Formatting And Preview
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
        {
            public class RunScenarioWithStepWithMultilineParameterWithHtmlFormattingAndPreview : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    xBDD.CurrentRun
                        .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                        .Given(xBDD.CreateStep(
                            "my starting condition with the following", 
                            () => { }, 
                            "My\r\n  multiline\r\n    parameter"))
                        .And(xBDD.CreateStep(
                            "my formatted genric code",
                            () => { },
                            "public void MyClass {}",
                            MultilineParameterFormat.code))
                        .And(xBDD.CreateStep(
                            "my formatted specific code (html)",
                            () => { },
                            "<table>\r\n    <tr>\r\n        <td>\r\n            Hey\r\n        </td>\r\n    </tr>\r\n</table>",
                            MultilineParameterFormat.htmlpreview))
                        .When(xBDD.CreateStep("my action"))
                        .Then(xBDD.CreateStep("my ending condition"))
                        .Run();
                    return xBDD.CurrentRun.TestRun.WriteToHtml();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>My Test Run</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
            <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
            <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
            <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
            <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
        </head>
        <body class="container-fluid">
            <h1 class="testrun-name text-success">My Test Run</h1>
            <ol class="areas">
                <li class="area">
                    <h2>My.Area.Path</h2>
                    <ol class="features">
                        <li class="feature">
                            <h3>My Feature</h3>
                            <ol class="scenarios">
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition with the following</h5>
                                            <pre class="mp">My
          multiline
            parameter</pre>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>And my formatted genric code</h5>
                                            <pre class="mp prettyprint">public void MyClass {}</pre>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>And my formatted specific code (html)</h5>
                                            <div>
                                                <ul class="nav nav-tabs" role="tablist">
                                                    <li role="presentation" class="active"><a href="#preview3" aria-controls="preview3" role="tab" data-toggle="tab">Preview</a></li>
                                                    <li role="presentation"><a href="#code3" aria-controls="code3" role="tab" data-toggle="tab">Code</a></li>
                                                </ul>
                                                <div class="tab-content">
                                                    <div role="tabpanel" class="tab-pane active" id="preview3">
                                                        <div class="panel panel-default">
                                                            <div class="panel-body">
                                                                <iframe width="100%" id="iframe3"></iframe>
                                                            </div>
                                                        </div>
                                                        <script type="text/javascript">
                                                            var iframe3doc = document.getElementById('iframe3').contentWindow.document;
                                                            iframe3doc.open();
                                                            var html3 = "<table> \
            <tr> \
                <td> \
                    Hey \
                <\/td> \
            <\/tr> \
        <\/table>";
                                                            iframe3doc.write(html3);
                                                            resizeIframe(document.getElementById('iframe3'));
                                                            iframe3doc.close();
                                                        </script>
                                                    </div>
                                                    <div role="tabpanel" class="tab-pane" id="code3">
                                                        <pre class="mp prettyprint lang-html">&lt;table&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    Hey
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;</pre>
                                                    </div>
                                                </div>
                                            </div>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
            </ol>
        </body>
        </html>
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml.WriteRunMultipleAreas" type="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml" method="WriteRunMultipleAreas" time="0.0025176" result="Pass">
        <output><![CDATA[Write Run Multiple Areas
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
        {
            public class RunMultipleAreas : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature One", "My.Area.Path.One")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature One", "My.Area.Path.One")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature Two", "My.Area.Path.Two")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature Two", "My.Area.Path.Two")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToHtml();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>My Test Run</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
            <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
            <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
            <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
            <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
        </head>
        <body class="container-fluid">
            <h1 class="testrun-name text-success">My Test Run</h1>
            <ol class="areas">
                <li class="area">
                    <h2>My.Area.Path.One</h2>
                    <ol class="features">
                        <li class="feature">
                            <h3>My Feature One</h3>
                            <ol class="scenarios">
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario One</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario Two</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
                <li class="area">
                    <h2>My.Area.Path.Two</h2>
                    <ol class="features">
                        <li class="feature">
                            <h3>My Feature Two</h3>
                            <ol class="scenarios">
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario One</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario Two</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
            </ol>
        </body>
        </html>
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml.WriteRunEmptyScenario" type="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml" method="WriteRunEmptyScenario" time="0.0015794" result="Pass">
        <output><![CDATA[Write Run Empty Scenario
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
        {
            public class RunEmptyScenario : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    xBDD.CurrentRun
                        .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                        .Run();
                    return xBDD.CurrentRun.TestRun.WriteToHtml();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>My Test Run</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
            <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
            <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
            <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
            <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
        </head>
        <body class="container-fluid">
            <h1 class="testrun-name text-success">My Test Run</h1>
            <ol class="areas">
                <li class="area">
                    <h2>My.Area.Path</h2>
                    <ol class="features">
                        <li class="feature">
                            <h3>My Feature</h3>
                            <ol class="scenarios">
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario</h4>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
            </ol>
        </body>
        </html>
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml.WriteRunScenarioWithSteps" type="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml" method="WriteRunScenarioWithSteps" time="0.001549" result="Pass">
        <output><![CDATA[Write Run Scenario With Steps
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
        {
            public class RunScenarioWithSteps : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToHtml();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>My Test Run</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
            <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
            <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
            <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
            <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
        </head>
        <body class="container-fluid">
            <h1 class="testrun-name text-success">My Test Run</h1>
            <ol class="areas">
                <li class="area">
                    <h2>My.Area.Path</h2>
                    <ol class="features">
                        <li class="feature">
                            <h3>My Feature</h3>
                            <ol class="scenarios">
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
            </ol>
        </body>
        </html>
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml.WriteRunScenarioWithStepWithMultilineParameterWithFormatting" type="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml" method="WriteRunScenarioWithStepWithMultilineParameterWithFormatting" time="0.0025324" result="Pass">
        <output><![CDATA[Write Run Scenario With Step With Multiline Parameter With Formatting
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
        {
            public class RunScenarioWithStepWithMultilineParameterWithFormatting : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    xBDD.CurrentRun
                        .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                        .Given(xBDD.CreateStep(
                            "my starting condition with the following", 
                            () => { }, 
                            "My\r\n  multiline\r\n    parameter"))
                        .And(xBDD.CreateStep(
                            "my formatted genric code",
                            () => { },
                            "public void MyClass {}",
                            MultilineParameterFormat.code))
                        .And(xBDD.CreateStep(
                            "my formatted specific code (html)",
                            () => { },
                            "<table><tr><td>Hey</td></tr></table>",
                            MultilineParameterFormat.html))
                        .When(xBDD.CreateStep("my action"))
                        .Then(xBDD.CreateStep("my ending condition"))
                        .Run();
                    return xBDD.CurrentRun.TestRun.WriteToHtml();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>My Test Run</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
            <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
            <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
            <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
            <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
        </head>
        <body class="container-fluid">
            <h1 class="testrun-name text-success">My Test Run</h1>
            <ol class="areas">
                <li class="area">
                    <h2>My.Area.Path</h2>
                    <ol class="features">
                        <li class="feature">
                            <h3>My Feature</h3>
                            <ol class="scenarios">
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition with the following</h5>
                                            <pre class="mp">My
          multiline
            parameter</pre>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>And my formatted genric code</h5>
                                            <pre class="mp prettyprint">public void MyClass {}</pre>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>And my formatted specific code (html)</h5>
                                            <pre class="mp prettyprint lang-html">&lt;table&gt;&lt;tr&gt;&lt;td&gt;Hey&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</pre>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
            </ol>
        </body>
        </html>
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml.WriteRunScenarioWithFailedStep" type="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml" method="WriteRunScenarioWithFailedStep" time="0.0051572" result="Pass">
        <output><![CDATA[Write Run Scenario With Failed Step
    the following method
        using System;
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
        {
            public class RunScenarioWithFailedStep : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action", () => { throw new Exception("My Error"); }))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToHtml();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>My Test Run</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
            <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
            <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
            <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
            <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
        </head>
        <body class="container-fluid">
            <h1 class="testrun-name text-danger">My Test Run</h1>
            <ol class="areas">
                <li class="area">
                    <h2>My.Area.Path</h2>
                    <ol class="features">
                        <li class="feature">
                            <h3>My Feature</h3>
                            <ol class="scenarios">
                                <li class="scenario failed bg-danger">
                                    <h4 class="text-danger">My Scenario [Failed]</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step failed text-danger">
                                            <h5>When my action [Failed]</h5>
                                            <dl class="exception dl-horizontal">
                                                <dt>Error Type</dt>
                                                <dd>Exception</dd>
                                                <dt>Message</dt>
                                                <dd><pre>My Error</pre></dd>
                                                <dt>Stack</dt>
        {{.*}}/rl
                                            </dl>
                                        </li>
                                        <li class="step skipped text-warning">
                                            <h5>Then my ending condition [Skipped - Previous Error]</h5>
                                        </li>
                                    </ul>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
            </ol>
        </body>
        </html>
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml.WriteRunScenarioWithStepWithMultilineParameter" type="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml" method="WriteRunScenarioWithStepWithMultilineParameter" time="0.0022587" result="Pass">
        <output><![CDATA[Write Run Scenario With Step With Multiline Parameter
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
        {
            public class RunScenarioWithStepWithMultilineParameter : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    xBDD.CurrentRun
                        .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                        .Given(xBDD.CreateStep("my starting condition with the following", () => { }, "My\r\n  multiline\r\n    parameter"))
                        .When(xBDD.CreateStep("my action"))
                        .Then(xBDD.CreateStep("my ending condition"))
                        .Run();
                    return xBDD.CurrentRun.TestRun.WriteToHtml();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>My Test Run</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
            <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
            <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
            <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
            <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
        </head>
        <body class="container-fluid">
            <h1 class="testrun-name text-success">My Test Run</h1>
            <ol class="areas">
                <li class="area">
                    <h2>My.Area.Path</h2>
                    <ol class="features">
                        <li class="feature">
                            <h3>My Feature</h3>
                            <ol class="scenarios">
                                <li class="scenario passed bg-success">
                                    <h4 class="text-success">My Scenario</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition with the following</h5>
                                            <pre class="mp">My
          multiline
            parameter</pre>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>When my action</h5>
                                        </li>
                                        <li class="step passed text-success">
                                            <h5>Then my ending condition</h5>
                                        </li>
                                    </ul>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
            </ol>
        </body>
        </html>
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml.WriteEmtpyTestRun" type="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml" method="WriteEmtpyTestRun" time="0.0010768" result="Pass">
        <output><![CDATA[Write Emtpy Test Run
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
        {
            public class EmptyTestRun : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    return xBDD.CurrentRun.TestRun.WriteToHtml();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>My Test Run</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
            <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
            <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
            <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
            <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
        </head>
        <body class="container-fluid">
            <h1 class="testrun-name text-muted">My Test Run</h1>
        </body>
        </html>
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml.WriteRunScenarioWithSkippedStep" type="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml" method="WriteRunScenarioWithSkippedStep" time="0.0025507" result="Pass">
        <output><![CDATA[Write Run Scenario With Skipped Step
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
        {
            public class RunScenarioWithSkippedStep : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action", () => { throw new SkipStepException("Deferred"); }))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToHtml();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>My Test Run</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
            <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
            <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
            <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
            <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
        </head>
        <body class="container-fluid">
            <h1 class="testrun-name text-danger">My Test Run</h1>
            <ol class="areas">
                <li class="area">
                    <h2>My.Area.Path</h2>
                    <ol class="features">
                        <li class="feature">
                            <h3>My Feature</h3>
                            <ol class="scenarios">
                                <li class="scenario failed bg-danger">
                                    <h4 class="text-danger">My Scenario [Failed - Step Skipped]</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step skipped text-warning">
                                            <h5>When my action [Skipped - Deferred]</h5>
                                        </li>
                                        <li class="step skipped text-warning">
                                            <h5>Then my ending condition [Skipped - Previous Error]</h5>
                                        </li>
                                    </ul>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
            </ol>
        </body>
        </html>
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml.WriteRunScenarioWithNotImplementedStep" type="xBDD.Reporting.Test.Features.WriteResults.WriteToHtml" method="WriteRunScenarioWithNotImplementedStep" time="0.0035903" result="Pass">
        <output><![CDATA[Write Run Scenario With Not Implemented Step
    the following method
        using System;
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
        {
            public class RunScenarioWithNotImplementedStep : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action", () => { throw new NotImplementedException(); }))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToHtml();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>My Test Run</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
            <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
            <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
            <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
            <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
        </head>
        <body class="container-fluid">
            <h1 class="testrun-name text-danger">My Test Run</h1>
            <ol class="areas">
                <li class="area">
                    <h2>My.Area.Path</h2>
                    <ol class="features">
                        <li class="feature">
                            <h3>My Feature</h3>
                            <ol class="scenarios">
                                <li class="scenario failed bg-danger">
                                    <h4 class="text-danger">My Scenario [Failed - Step Not Implemented]</h4>
                                    <ul class="steps list-unstyled">
                                        <li class="step passed text-success">
                                            <h5>Given my starting condition</h5>
                                        </li>
                                        <li class="step failed text-danger">
                                            <h5>When my action [Failed - Not Implemented]</h5>
                                        </li>
                                        <li class="step skipped text-warning">
                                            <h5>Then my ending condition [Skipped - Previous Error]</h5>
                                        </li>
                                    </ul>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
            </ol>
        </body>
        </html>
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunMultipleFeaturesSameArea" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunMultipleFeaturesSameArea" time="0.0036557" result="Pass">
        <output><![CDATA[Write Run Multiple Features Same Area
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunMultipleFeaturesSameArea : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature One", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature One", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature Two", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature Two", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature One
        		My Scenario One
        			Given my starting condition
        			When my action
        			Then my ending condition
        		My Scenario Two
        			Given my starting condition
        			When my action
        			Then my ending condition
        	My Feature Two
        		My Scenario One
        			Given my starting condition
        			When my action
        			Then my ending condition
        		My Scenario Two
        			Given my starting condition
        			When my action
        			Then my ending condition
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunEmptyScenario" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunEmptyScenario" time="0.0005473" result="Pass">
        <output><![CDATA[Write Run Empty Scenario
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunEmptyScenario : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    xBDD.CurrentRun
                        .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                        .Run();
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunScenarioWithSkippedStep" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunScenarioWithSkippedStep" time="0.0010795" result="Pass">
        <output><![CDATA[Write Run Scenario With Skipped Step
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunScenarioWithSkippedStep : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action", () => { throw new SkipStepException("Deferred"); }))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario [Failed - Step Skipped]
        			Given my starting condition
        			When my action [Skipped - Deferred]
        			Then my ending condition [Skipped - Previous Error]
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunScenarioWithNotImplementedStep" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunScenarioWithNotImplementedStep" time="0.000997" result="Pass">
        <output><![CDATA[Write Run Scenario With Not Implemented Step
    the following method
        using System;
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunScenarioWithNotImplementedStep : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action", () => { throw new NotImplementedException(); }))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario [Failed - Step Not Implemented]
        			Given my starting condition
        			When my action [Failed - Not Implemented]
        			Then my ending condition [Skipped - Previous Error]
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteSkippedEmptyScenario" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteSkippedEmptyScenario" time="0.0006021" result="Pass">
        <output><![CDATA[Write Skipped Empty Scenario
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class SkippedEmptyScenario : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Skip("Deferred");
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario [Skipped - Deferred]
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunMultipleScenariosSameFeature" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunMultipleScenariosSameFeature" time="0.0007552" result="Pass">
        <output><![CDATA[Write Run Multiple Scenarios Same Feature
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunMultipleScenariosSameFeature : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario One
        			Given my starting condition
        			When my action
        			Then my ending condition
        		My Scenario Two
        			Given my starting condition
        			When my action
        			Then my ending condition
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteEmtpyTestRun" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteEmtpyTestRun" time="0.0005097" result="Pass">
        <output><![CDATA[Write Emtpy Test Run
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class EmptyTestRun : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteSkippedScenarioWithSteps" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteSkippedScenarioWithSteps" time="0.0006671" result="Pass">
        <output><![CDATA[Write Skipped Scenario With Steps
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class SkippedScenarioWithSteps : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Skip("Deferred");
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario [Skipped - Deferred]
        			Given my starting condition
        			When my action
        			Then my ending condition
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunScenarioWithFailedStep" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunScenarioWithFailedStep" time="0.0024302" result="Pass">
        <output><![CDATA[Write Run Scenario With Failed Step
    the following method
        using System;
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunScenarioWithFailedStep : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action", () => { throw new Exception("My Error"); }))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario [Failed]
        			Given my starting condition
        			When my action [Failed]
        				Error Type: Exception
        				   Message: My Error
        {{				     Stack\: .*}}
        {{.*}}/rl
        			Then my ending condition [Skipped - Previous Error]
]]></output>
        <traits>
          <trait name="category" value="now" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunScenarioWithStepWithMultilineParameter" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunScenarioWithStepWithMultilineParameter" time="0.0016717" result="Pass">
        <output><![CDATA[Write Run Scenario With Step With Multiline Parameter
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunScenarioWithStepWithMultilineParameter : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    xBDD.CurrentRun
                        .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                        .Given(xBDD.CreateStep("my starting condition with the following", () => { }, "My\r\nmultiline\r\nparameter"))
                        .When(xBDD.CreateStep("my action"))
                        .Then(xBDD.CreateStep("my ending condition"))
                        .Run();
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario
        			Given my starting condition with the following
        				My
        				multiline
        				parameter
        			When my action
        			Then my ending condition
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunScenarioWithSteps" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunScenarioWithSteps" time="0.0010749" result="Pass">
        <output><![CDATA[Write Run Scenario With Steps
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunScenarioWithSteps : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario", "My Feature", "My.Area.Path")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path
        	My Feature
        		My Scenario
        			Given my starting condition
        			When my action
        			Then my ending condition
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.WriteResults.WriteToText.WriteRunMultipleAreas" type="xBDD.Reporting.Test.Features.WriteResults.WriteToText" method="WriteRunMultipleAreas" time="0.0014532" result="Pass">
        <output><![CDATA[Write Run Multiple Areas
    the following method
        using xBDD.Test;
        namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
        {
            public class RunMultipleAreas : IExecute<string>
            {
                public string Execute()
                {
                    var xBDD = new xBDDMock();
                    xBDD.CurrentRun.TestRun.Name = "My Test Run";
                    try
                    {
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature One", "My.Area.Path.One")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature One", "My.Area.Path.One")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario One", "My Feature Two", "My.Area.Path.Two")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                        xBDD.CurrentRun
                            .AddScenario("My Scenario Two", "My Feature Two", "My.Area.Path.Two")
                            .Given(xBDD.CreateStep("my starting condition"))
                            .When(xBDD.CreateStep("my action"))
                            .Then(xBDD.CreateStep("my ending condition"))
                            .Run();
                    }
                    catch { }
                    return xBDD.CurrentRun.TestRun.WriteToText();
                }
            }
        }
    the method is executed
    the test results written should match the template:
        My Test Run

        My.Area.Path.One
        	My Feature One
        		My Scenario One
        			Given my starting condition
        			When my action
        			Then my ending condition
        		My Scenario Two
        			Given my starting condition
        			When my action
        			Then my ending condition
        My.Area.Path.Two
        	My Feature Two
        		My Scenario One
        			Given my starting condition
        			When my action
        			Then my ending condition
        		My Scenario Two
        			Given my starting condition
        			When my action
        			Then my ending condition
]]></output>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.WriteToHtml.GetString" type="xBDD.Reporting.Test.Features.ViewHtmlReport.WriteToHtml" method="GetString" time="0.001073" result="Pass">
        <traits>
          <trait name="category" value="today" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResutls.ViewTestRun.EmptyTestRun" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResutls.ViewTestRun" method="EmptyTestRun" time="0.0892174" result="Pass">
        <output><![CDATA[testrun-name text-muted
]]></output>
        <traits>
          <trait name="category" value="today" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResutls.ViewTestRun.PassingWithSomeSkipped" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResutls.ViewTestRun" method="PassingWithSomeSkipped" time="0.0001527" result="Pass">
        <traits>
          <trait name="category" value="today" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResutls.ViewTestRun.Failing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResutls.ViewTestRun" method="Failing" time="0.0001158" result="Pass">
        <traits>
          <trait name="category" value="today" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResutls.ViewTestRun.PassingTestRun" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResutls.ViewTestRun" method="PassingTestRun" time="0.1069254" result="Pass">
        <output><![CDATA[testrun-name text-success
]]></output>
        <traits>
          <trait name="category" value="today" />
        </traits>
      </test>
      <test name="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewArea.Passing" type="xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults.ViewArea" method="Passing" time="0.0002584" result="Pass">
        <traits>
          <trait name="category" value="today" />
        </traits>
      </test>
    </collection>
  </assembly>
</assemblies>