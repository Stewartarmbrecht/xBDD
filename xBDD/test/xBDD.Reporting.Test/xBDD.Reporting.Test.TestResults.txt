xBDD.Reporting.Test 2015-09-30T15:39:49

xBDD.Reporting.Test.Features.ViewHtmlReport
	Write To Html
		Get String
			When the code calls 'xBDD.CurrentRun.WriteToHTML()
			Then the code should return a string value of the html report
xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResults
	View Area
		Passing [Skipped - Not Started]
xBDD.Reporting.Test.Features.ViewHtmlReport.ViewResutls
	View Test Run
		Empty Test Run
			Given the test results of an empty test run
			When the user views the html report
			Then the report will show the test run name at the top
			And the report will show the test run name as the title for the page
			And the report will show the test run name in gray to indicate no scenarios were run
		Failing [Skipped - Not Started]
		Passing Test Run
			Given the test results of a passing test run
			When the user views the html report
			Then the report will show the test run name at the top
			And the report will show the test run name as the title for the page
			And the report will show the test run name in green to indicate the test run passed
		Passing With Some Skipped [Skipped - Not Started]
xBDD.Reporting.Test.Features.WriteResults
	Browse Html Report
		View Empty Test Run
			Given the test results of an empty test run
			When the user views the html report
			Then the report will show the test run name at the top
			And the report will show the test run name as the title for the page
		View Passing Scenario [Skipped - Not Started]
			Given the test results of a passing test run
			When the user views the html report
			Then the area path will be green
			And the feature name will be green
			And the scenario name will be green
			And the step names will be green
		View Run Scenario [Skipped - Not Started]
			Given the test results of a passing test run
			When the user views the html report
			Then the area path will be displayed
			And the feature name will be displayed indented under the area path
			And the scenario name will be displayed indented under the feature name
			And the steps will be displayed indented, under the scenario
		View Run Step With Multiline Parameter Of Text [Skipped - Not Started]
			Given the test results of a passing test run
			When the user views the html report
			Then the steps multiline parameter will show indented under the step name
			And the multline parameter will have line breaks and indentation preserved
	Write To Html
		Write Emtpy Test Run
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
				{
				    public class EmptyTestRun : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            return xBDD.CurrentRun.TestRun.WriteToHtml();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				<!DOCTYPE html>
				<html>
				<head>
				    <meta charset="utf-8" />
				    <meta name="viewport" content="width=device-width, initial-scale=1" />
				    <title>My Test Run</title>
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
				    <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
				    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
				    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
				    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
				    <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
				</head>
				<body class="container-fluid">
				    <h1 class="testrun-name text-muted">My Test Run</h1>
				</body>
				</html>
		Write Run Empty Scenario
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
				{
				    public class RunEmptyScenario : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            xBDD.CurrentRun
				                .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                .Run();
				            return xBDD.CurrentRun.TestRun.WriteToHtml();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				<!DOCTYPE html>
				<html>
				<head>
				    <meta charset="utf-8" />
				    <meta name="viewport" content="width=device-width, initial-scale=1" />
				    <title>My Test Run</title>
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
				    <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
				    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
				    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
				    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
				    <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
				</head>
				<body class="container-fluid">
				    <h1 class="testrun-name text-success">My Test Run</h1>
				    <ol class="areas">
				        <li class="area">
				            <h2>My.Area.Path</h2>
				            <ol class="features">
				                <li class="feature">
				                    <h3>My Feature</h3>
				                    <ol class="scenarios">
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario</h4>
				                        </li>
				                    </ol>
				                </li>
				            </ol>
				        </li>
				    </ol>
				</body>
				</html>
		Write Run Multiple Areas
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
				{
				    public class RunMultipleAreas : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature One", "My.Area.Path.One")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature One", "My.Area.Path.One")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature Two", "My.Area.Path.Two")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature Two", "My.Area.Path.Two")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToHtml();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				<!DOCTYPE html>
				<html>
				<head>
				    <meta charset="utf-8" />
				    <meta name="viewport" content="width=device-width, initial-scale=1" />
				    <title>My Test Run</title>
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
				    <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
				    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
				    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
				    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
				    <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
				</head>
				<body class="container-fluid">
				    <h1 class="testrun-name text-success">My Test Run</h1>
				    <ol class="areas">
				        <li class="area">
				            <h2>My.Area.Path.One</h2>
				            <ol class="features">
				                <li class="feature">
				                    <h3>My Feature One</h3>
				                    <ol class="scenarios">
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario One</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario Two</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                    </ol>
				                </li>
				            </ol>
				        </li>
				        <li class="area">
				            <h2>My.Area.Path.Two</h2>
				            <ol class="features">
				                <li class="feature">
				                    <h3>My Feature Two</h3>
				                    <ol class="scenarios">
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario One</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario Two</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                    </ol>
				                </li>
				            </ol>
				        </li>
				    </ol>
				</body>
				</html>
		Write Run Multiple Features Same Area
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
				{
				    public class RunMultipleFeaturesSameArea : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature One", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature One", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature Two", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature Two", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToHtml();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				<!DOCTYPE html>
				<html>
				<head>
				    <meta charset="utf-8" />
				    <meta name="viewport" content="width=device-width, initial-scale=1" />
				    <title>My Test Run</title>
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
				    <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
				    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
				    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
				    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
				    <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
				</head>
				<body class="container-fluid">
				    <h1 class="testrun-name text-success">My Test Run</h1>
				    <ol class="areas">
				        <li class="area">
				            <h2>My.Area.Path</h2>
				            <ol class="features">
				                <li class="feature">
				                    <h3>My Feature One</h3>
				                    <ol class="scenarios">
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario One</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario Two</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                    </ol>
				                </li>
				                <li class="feature">
				                    <h3>My Feature Two</h3>
				                    <ol class="scenarios">
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario One</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario Two</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                    </ol>
				                </li>
				            </ol>
				        </li>
				    </ol>
				</body>
				</html>
		Write Run Multiple Write To Html Scenarios Same Feature
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
				{
				    public class RunMultipleScenariosSameFeature : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToHtml();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				<!DOCTYPE html>
				<html>
				<head>
				    <meta charset="utf-8" />
				    <meta name="viewport" content="width=device-width, initial-scale=1" />
				    <title>My Test Run</title>
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
				    <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
				    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
				    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
				    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
				    <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
				</head>
				<body class="container-fluid">
				    <h1 class="testrun-name text-success">My Test Run</h1>
				    <ol class="areas">
				        <li class="area">
				            <h2>My.Area.Path</h2>
				            <ol class="features">
				                <li class="feature">
				                    <h3>My Feature</h3>
				                    <ol class="scenarios">
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario One</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario Two</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                    </ol>
				                </li>
				            </ol>
				        </li>
				    </ol>
				</body>
				</html>
		Write Run Scenario With Failed Step
			Given the following method
				using System;
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
				{
				    public class RunScenarioWithFailedStep : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action", () => { throw new Exception("My Error"); }))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToHtml();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				<!DOCTYPE html>
				<html>
				<head>
				    <meta charset="utf-8" />
				    <meta name="viewport" content="width=device-width, initial-scale=1" />
				    <title>My Test Run</title>
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
				    <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
				    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
				    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
				    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
				    <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
				</head>
				<body class="container-fluid">
				    <h1 class="testrun-name text-danger">My Test Run</h1>
				    <ol class="areas">
				        <li class="area">
				            <h2>My.Area.Path</h2>
				            <ol class="features">
				                <li class="feature">
				                    <h3>My Feature</h3>
				                    <ol class="scenarios">
				                        <li class="scenario failed bg-danger">
				                            <h4 class="text-danger">My Scenario [Failed]</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step failed text-danger">
				                                    <h5>When my action [Failed]</h5>
				                                    <dl class="exception dl-horizontal">
				                                        <dt>Error Type</dt>
				                                        <dd>Exception</dd>
				                                        <dt>Message</dt>
				                                        <dd><pre>My Error</pre></dd>
				                                        <dt>Stack</dt>
				{{.*}}/rl
				                                    </dl>
				                                </li>
				                                <li class="step skipped text-warning">
				                                    <h5>Then my ending condition [Skipped - Previous Error]</h5>
				                                </li>
				                            </ul>
				                        </li>
				                    </ol>
				                </li>
				            </ol>
				        </li>
				    </ol>
				</body>
				</html>
		Write Run Scenario With Not Implemented Step
			Given the following method
				using System;
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
				{
				    public class RunScenarioWithNotImplementedStep : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action", () => { throw new NotImplementedException(); }))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToHtml();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				<!DOCTYPE html>
				<html>
				<head>
				    <meta charset="utf-8" />
				    <meta name="viewport" content="width=device-width, initial-scale=1" />
				    <title>My Test Run</title>
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
				    <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
				    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
				    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
				    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
				    <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
				</head>
				<body class="container-fluid">
				    <h1 class="testrun-name text-danger">My Test Run</h1>
				    <ol class="areas">
				        <li class="area">
				            <h2>My.Area.Path</h2>
				            <ol class="features">
				                <li class="feature">
				                    <h3>My Feature</h3>
				                    <ol class="scenarios">
				                        <li class="scenario failed bg-danger">
				                            <h4 class="text-danger">My Scenario [Failed - Step Not Implemented]</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step failed text-danger">
				                                    <h5>When my action [Failed - Not Implemented]</h5>
				                                </li>
				                                <li class="step skipped text-warning">
				                                    <h5>Then my ending condition [Skipped - Previous Error]</h5>
				                                </li>
				                            </ul>
				                        </li>
				                    </ol>
				                </li>
				            </ol>
				        </li>
				    </ol>
				</body>
				</html>
		Write Run Scenario With Skipped Step
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
				{
				    public class RunScenarioWithSkippedStep : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action", () => { throw new SkipStepException("Deferred"); }))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToHtml();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				<!DOCTYPE html>
				<html>
				<head>
				    <meta charset="utf-8" />
				    <meta name="viewport" content="width=device-width, initial-scale=1" />
				    <title>My Test Run</title>
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
				    <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
				    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
				    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
				    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
				    <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
				</head>
				<body class="container-fluid">
				    <h1 class="testrun-name text-danger">My Test Run</h1>
				    <ol class="areas">
				        <li class="area">
				            <h2>My.Area.Path</h2>
				            <ol class="features">
				                <li class="feature">
				                    <h3>My Feature</h3>
				                    <ol class="scenarios">
				                        <li class="scenario failed bg-danger">
				                            <h4 class="text-danger">My Scenario [Failed - Step Skipped]</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step skipped text-warning">
				                                    <h5>When my action [Skipped - Deferred]</h5>
				                                </li>
				                                <li class="step skipped text-warning">
				                                    <h5>Then my ending condition [Skipped - Previous Error]</h5>
				                                </li>
				                            </ul>
				                        </li>
				                    </ol>
				                </li>
				            </ol>
				        </li>
				    </ol>
				</body>
				</html>
		Write Run Scenario With Step With Multiline Parameter
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
				{
				    public class RunScenarioWithStepWithMultilineParameter : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            xBDD.CurrentRun
				                .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                .Given(xBDD.CreateStep("my starting condition with the following", () => { }, "My\r\n  multiline\r\n    parameter"))
				                .When(xBDD.CreateStep("my action"))
				                .Then(xBDD.CreateStep("my ending condition"))
				                .Run();
				            return xBDD.CurrentRun.TestRun.WriteToHtml();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				<!DOCTYPE html>
				<html>
				<head>
				    <meta charset="utf-8" />
				    <meta name="viewport" content="width=device-width, initial-scale=1" />
				    <title>My Test Run</title>
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
				    <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
				    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
				    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
				    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
				    <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
				</head>
				<body class="container-fluid">
				    <h1 class="testrun-name text-success">My Test Run</h1>
				    <ol class="areas">
				        <li class="area">
				            <h2>My.Area.Path</h2>
				            <ol class="features">
				                <li class="feature">
				                    <h3>My Feature</h3>
				                    <ol class="scenarios">
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition with the following</h5>
				                                    <pre class="mp">My
				  multiline
				    parameter</pre>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                    </ol>
				                </li>
				            </ol>
				        </li>
				    </ol>
				</body>
				</html>
		Write Run Scenario With Step With Multiline Parameter With Formatting
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
				{
				    public class RunScenarioWithStepWithMultilineParameterWithFormatting : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            xBDD.CurrentRun
				                .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                .Given(xBDD.CreateStep(
				                    "my starting condition with the following", 
				                    () => { }, 
				                    "My\r\n  multiline\r\n    parameter"))
				                .And(xBDD.CreateStep(
				                    "my formatted genric code",
				                    () => { },
				                    "public void MyClass {}",
				                    MultilineParameterFormat.code))
				                .And(xBDD.CreateStep(
				                    "my formatted specific code (html)",
				                    () => { },
				                    "<table><tr><td>Hey</td></tr></table>",
				                    MultilineParameterFormat.html))
				                .When(xBDD.CreateStep("my action"))
				                .Then(xBDD.CreateStep("my ending condition"))
				                .Run();
				            return xBDD.CurrentRun.TestRun.WriteToHtml();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				<!DOCTYPE html>
				<html>
				<head>
				    <meta charset="utf-8" />
				    <meta name="viewport" content="width=device-width, initial-scale=1" />
				    <title>My Test Run</title>
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
				    <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
				    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
				    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
				    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
				    <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
				</head>
				<body class="container-fluid">
				    <h1 class="testrun-name text-success">My Test Run</h1>
				    <ol class="areas">
				        <li class="area">
				            <h2>My.Area.Path</h2>
				            <ol class="features">
				                <li class="feature">
				                    <h3>My Feature</h3>
				                    <ol class="scenarios">
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition with the following</h5>
				                                    <pre class="mp">My
				  multiline
				    parameter</pre>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>And my formatted genric code</h5>
				                                    <pre class="mp prettyprint">public void MyClass {}</pre>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>And my formatted specific code (html)</h5>
				                                    <pre class="mp prettyprint lang-html">&lt;table&gt;&lt;tr&gt;&lt;td&gt;Hey&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</pre>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                    </ol>
				                </li>
				            </ol>
				        </li>
				    </ol>
				</body>
				</html>
		Write Run Scenario With Step With Multiline Parameter With Html Formatting And Preview
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
				{
				    public class RunScenarioWithStepWithMultilineParameterWithHtmlFormattingAndPreview : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            xBDD.CurrentRun
				                .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                .Given(xBDD.CreateStep(
				                    "my starting condition with the following", 
				                    () => { }, 
				                    "My\r\n  multiline\r\n    parameter"))
				                .And(xBDD.CreateStep(
				                    "my formatted genric code",
				                    () => { },
				                    "public void MyClass {}",
				                    MultilineParameterFormat.code))
				                .And(xBDD.CreateStep(
				                    "my formatted specific code (html)",
				                    () => { },
				                    "<table>\r\n    <tr>\r\n        <td>\r\n            Hey\r\n        </td>\r\n    </tr>\r\n</table>",
				                    MultilineParameterFormat.htmlpreview))
				                .When(xBDD.CreateStep("my action"))
				                .Then(xBDD.CreateStep("my ending condition"))
				                .Run();
				            return xBDD.CurrentRun.TestRun.WriteToHtml();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				<!DOCTYPE html>
				<html>
				<head>
				    <meta charset="utf-8" />
				    <meta name="viewport" content="width=device-width, initial-scale=1" />
				    <title>My Test Run</title>
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
				    <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
				    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
				    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
				    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
				    <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
				</head>
				<body class="container-fluid">
				    <h1 class="testrun-name text-success">My Test Run</h1>
				    <ol class="areas">
				        <li class="area">
				            <h2>My.Area.Path</h2>
				            <ol class="features">
				                <li class="feature">
				                    <h3>My Feature</h3>
				                    <ol class="scenarios">
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition with the following</h5>
				                                    <pre class="mp">My
				  multiline
				    parameter</pre>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>And my formatted genric code</h5>
				                                    <pre class="mp prettyprint">public void MyClass {}</pre>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>And my formatted specific code (html)</h5>
				                                    <div>
				                                        <ul class="nav nav-tabs" role="tablist">
				                                            <li role="presentation" class="active"><a href="#preview3" aria-controls="preview3" role="tab" data-toggle="tab">Preview</a></li>
				                                            <li role="presentation"><a href="#code3" aria-controls="code3" role="tab" data-toggle="tab">Code</a></li>
				                                        </ul>
				                                        <div class="tab-content">
				                                            <div role="tabpanel" class="tab-pane active" id="preview3">
				                                                <div class="panel panel-default">
				                                                    <div class="panel-body">
				                                                        <iframe width="100%" id="iframe3"></iframe>
				                                                    </div>
				                                                </div>
				                                                <script type="text/javascript">
				                                                    var iframe3doc = document.getElementById('iframe3').contentWindow.document;
				                                                    iframe3doc.open();
				                                                    var html3 = "<table> \
				    <tr> \
				        <td> \
				            Hey \
				        <\/td> \
				    <\/tr> \
				<\/table>";
				                                                    iframe3doc.write(html3);
				                                                    resizeIframe(document.getElementById('iframe3'));
				                                                    iframe3doc.close();
				                                                </script>
				                                            </div>
				                                            <div role="tabpanel" class="tab-pane" id="code3">
				                                                <pre class="mp prettyprint lang-html">&lt;table&gt;
				    &lt;tr&gt;
				        &lt;td&gt;
				            Hey
				        &lt;/td&gt;
				    &lt;/tr&gt;
				&lt;/table&gt;</pre>
				                                            </div>
				                                        </div>
				                                    </div>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                    </ol>
				                </li>
				            </ol>
				        </li>
				    </ol>
				</body>
				</html>
		Write Run Scenario With Steps
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
				{
				    public class RunScenarioWithSteps : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToHtml();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				<!DOCTYPE html>
				<html>
				<head>
				    <meta charset="utf-8" />
				    <meta name="viewport" content="width=device-width, initial-scale=1" />
				    <title>My Test Run</title>
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
				    <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
				    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
				    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
				    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
				    <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
				</head>
				<body class="container-fluid">
				    <h1 class="testrun-name text-success">My Test Run</h1>
				    <ol class="areas">
				        <li class="area">
				            <h2>My.Area.Path</h2>
				            <ol class="features">
				                <li class="feature">
				                    <h3>My Feature</h3>
				                    <ol class="scenarios">
				                        <li class="scenario passed bg-success">
				                            <h4 class="text-success">My Scenario</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step passed text-success">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step passed text-success">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                    </ol>
				                </li>
				            </ol>
				        </li>
				    </ol>
				</body>
				</html>
		Write Skipped Empty Scenario
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
				{
				    public class SkippedEmptyScenario : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Skip("Deferred");
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToHtml();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				<!DOCTYPE html>
				<html>
				<head>
				    <meta charset="utf-8" />
				    <meta name="viewport" content="width=device-width, initial-scale=1" />
				    <title>My Test Run</title>
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
				    <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
				    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
				    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
				    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
				    <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
				</head>
				<body class="container-fluid">
				    <h1 class="testrun-name text-warning">My Test Run</h1>
				    <ol class="areas">
				        <li class="area">
				            <h2>My.Area.Path</h2>
				            <ol class="features">
				                <li class="feature">
				                    <h3>My Feature</h3>
				                    <ol class="scenarios">
				                        <li class="scenario skipped bg-warning">
				                            <h4 class="text-warning">My Scenario [Skipped - Deferred]</h4>
				                        </li>
				                    </ol>
				                </li>
				            </ol>
				        </li>
				    </ol>
				</body>
				</html>
		Write Skipped Scenario With Steps
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToHtmlScenarios
				{
				    public class SkippedScenarioWithSteps : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Skip("Deferred");
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToHtml();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				<!DOCTYPE html>
				<html>
				<head>
				    <meta charset="utf-8" />
				    <meta name="viewport" content="width=device-width, initial-scale=1" />
				    <title>My Test Run</title>
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
				    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
				    <style>.mp { margin-left: 2em } iframe { border: 1px solid gray; resize: both; overflow: auto; }</style>
				    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
				    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
				    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=sunburst"></script>
				    <script language="javascript" type="text/javascript">function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px'; }</script>
				</head>
				<body class="container-fluid">
				    <h1 class="testrun-name text-warning">My Test Run</h1>
				    <ol class="areas">
				        <li class="area">
				            <h2>My.Area.Path</h2>
				            <ol class="features">
				                <li class="feature">
				                    <h3>My Feature</h3>
				                    <ol class="scenarios">
				                        <li class="scenario skipped bg-warning">
				                            <h4 class="text-warning">My Scenario [Skipped - Deferred]</h4>
				                            <ul class="steps list-unstyled">
				                                <li class="step skipped text-warning">
				                                    <h5>Given my starting condition</h5>
				                                </li>
				                                <li class="step skipped text-warning">
				                                    <h5>When my action</h5>
				                                </li>
				                                <li class="step skipped text-warning">
				                                    <h5>Then my ending condition</h5>
				                                </li>
				                            </ul>
				                        </li>
				                    </ol>
				                </li>
				            </ol>
				        </li>
				    </ol>
				</body>
				</html>
	Write To Text
		Write Emtpy Test Run
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
				{
				    public class EmptyTestRun : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            return xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
		Write Run Empty Scenario
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
				{
				    public class RunEmptyScenario : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            xBDD.CurrentRun
				                .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                .Run();
				            return xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario
		Write Run Multiple Areas
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
				{
				    public class RunMultipleAreas : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature One", "My.Area.Path.One")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature One", "My.Area.Path.One")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature Two", "My.Area.Path.Two")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature Two", "My.Area.Path.Two")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path.One
					My Feature One
						My Scenario One
							Given my starting condition
							When my action
							Then my ending condition
						My Scenario Two
							Given my starting condition
							When my action
							Then my ending condition
				My.Area.Path.Two
					My Feature Two
						My Scenario One
							Given my starting condition
							When my action
							Then my ending condition
						My Scenario Two
							Given my starting condition
							When my action
							Then my ending condition
		Write Run Multiple Features Same Area
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
				{
				    public class RunMultipleFeaturesSameArea : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature One", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature One", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature Two", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature Two", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature One
						My Scenario One
							Given my starting condition
							When my action
							Then my ending condition
						My Scenario Two
							Given my starting condition
							When my action
							Then my ending condition
					My Feature Two
						My Scenario One
							Given my starting condition
							When my action
							Then my ending condition
						My Scenario Two
							Given my starting condition
							When my action
							Then my ending condition
		Write Run Multiple Scenarios Same Feature
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
				{
				    public class RunMultipleScenariosSameFeature : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario One", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario Two", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario One
							Given my starting condition
							When my action
							Then my ending condition
						My Scenario Two
							Given my starting condition
							When my action
							Then my ending condition
		Write Run Scenario With Failed Step
			Given the following method
				using System;
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
				{
				    public class RunScenarioWithFailedStep : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action", () => { throw new Exception("My Error"); }))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario [Failed]
							Given my starting condition
							When my action [Failed]
								Error Type: Exception
								   Message: My Error
				{{				     Stack\: .*}}
				{{.*}}/rl
							Then my ending condition [Skipped - Previous Error]
		Write Run Scenario With Not Implemented Step
			Given the following method
				using System;
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
				{
				    public class RunScenarioWithNotImplementedStep : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action", () => { throw new NotImplementedException(); }))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario [Failed - Step Not Implemented]
							Given my starting condition
							When my action [Failed - Not Implemented]
							Then my ending condition [Skipped - Previous Error]
		Write Run Scenario With Skipped Step
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
				{
				    public class RunScenarioWithSkippedStep : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action", () => { throw new SkipStepException("Deferred"); }))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario [Failed - Step Skipped]
							Given my starting condition
							When my action [Skipped - Deferred]
							Then my ending condition [Skipped - Previous Error]
		Write Run Scenario With Step With Multiline Parameter
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
				{
				    public class RunScenarioWithStepWithMultilineParameter : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            xBDD.CurrentRun
				                .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                .Given(xBDD.CreateStep("my starting condition with the following", () => { }, "My\r\nmultiline\r\nparameter"))
				                .When(xBDD.CreateStep("my action"))
				                .Then(xBDD.CreateStep("my ending condition"))
				                .Run();
				            return xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario
							Given my starting condition with the following
								My
								multiline
								parameter
							When my action
							Then my ending condition
		Write Run Scenario With Steps
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
				{
				    public class RunScenarioWithSteps : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Run();
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario
							Given my starting condition
							When my action
							Then my ending condition
		Write Skipped Empty Scenario
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
				{
				    public class SkippedEmptyScenario : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Skip("Deferred");
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario [Skipped - Deferred]
		Write Skipped Scenario With Steps
			Given the following method
				using xBDD.Test;
				namespace xBDD.Reporting.Test.Features.WriteResults.WriteToTextScenarios
				{
				    public class SkippedScenarioWithSteps : IExecute<string>
				    {
				        public string Execute()
				        {
				            var xBDD = new xBDDMock();
				            xBDD.CurrentRun.TestRun.Name = "My Test Run";
				            try
				            {
				                xBDD.CurrentRun
				                    .AddScenario("My Scenario", "My Feature", "My.Area.Path")
				                    .Given(xBDD.CreateStep("my starting condition"))
				                    .When(xBDD.CreateStep("my action"))
				                    .Then(xBDD.CreateStep("my ending condition"))
				                    .Skip("Deferred");
				            }
				            catch { }
				            return xBDD.CurrentRun.TestRun.WriteToText();
				        }
				    }
				}
			When the method is executed
			Then the test results written should match the template:
				My Test Run
				
				My.Area.Path
					My Feature
						My Scenario [Skipped - Deferred]
							Given my starting condition
							When my action
							Then my ending condition
