<?xml version="1.0" encoding="utf-8"?>
<assemblies>
  <assembly name="xBDD.Core.Test.dll" environment="32-bit .NET (unknown version) [collection-per-class, parallel (4 threads)]" test-framework="xUnit.net 2.1.0.3168" run-date="2015-09-30" run-time="17:36:33" total="142" passed="142" failed="0" skipped="0" time="0.308" errors="0">
    <errors />
    <collection total="142" passed="142" failed="0" skipped="0" name="xBDDCoreTest" time="0.061">
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties.State" type="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties" method="State" time="0.0096851" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties.StartTime" type="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties" method="StartTime" time="0.0006408" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties.TotalTime" type="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties" method="TotalTime" time="0.0001877" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties.Name" type="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties" method="Name" time="0.0001505" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties.EndTime" type="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties" method="EndTime" time="0.0001573" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties.AreaPath" type="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties" method="AreaPath" time="0.0002333" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties.Steps" type="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties" method="Steps" time="0.0001778" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties.Outcome" type="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties" method="Outcome" time="0.000128" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties.FeatureName" type="xBDD.Core.Test.Features.ViewProperties.ViewScenarioProperties" method="FeatureName" time="0.0001615" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties.Reason" type="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties" method="Reason" time="0.000169" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties.MultilineParameter" type="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties" method="MultilineParameter" time="0.0001017" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties.State" type="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties" method="State" time="0.0000866" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties.Outcome" type="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties" method="Outcome" time="0.0000855" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties.Exception" type="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties" method="Exception" time="0.0000992" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties.InlineParameters" type="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties" method="InlineParameters" time="0.0000942" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties.EndTime" type="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties" method="EndTime" time="0.0000847" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties.TableParameter" type="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties" method="TableParameter" time="0.0000786" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties.StartTime" type="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties" method="StartTime" time="0.0000802" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties.Name" type="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties" method="Name" time="0.0000767" result="Pass" />
      <test name="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties.ActionType" type="xBDD.Core.Test.Features.ViewProperties.ViewStepProperties" method="ActionType" time="0.0000813" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.SkipAsyncNullReason" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="SkipAsyncNullReason" time="0.0038906" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.Skip" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="Skip" time="0.0001607" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.WithAllPassingSteps" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="WithAllPassingSteps" time="0.0001296" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.WithOneMiddleNotImplementedStepAndTheRestPassing" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="WithOneMiddleNotImplementedStepAndTheRestPassing" time="0.0001216" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.WithOneMiddleSkippedStepAndTheRestPassing" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="WithOneMiddleSkippedStepAndTheRestPassing" time="0.0001231" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.WriteScenarioToOutput" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="WriteScenarioToOutput" time="0.0001276" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.WithOneFailingStepAndPreceedingPassingSteps" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="WithOneFailingStepAndPreceedingPassingSteps" time="0.0001105" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.RunAsync" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="RunAsync" time="0.0006401" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.SkipAsync" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="SkipAsync" time="0.0006385" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.RunNoSteps" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="RunNoSteps" time="0.0001155" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.WithOneMiddleFailingStepAndTheRestPassing" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="WithOneMiddleFailingStepAndTheRestPassing" time="0.0001402" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.SkipNullReason" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="SkipNullReason" time="0.0000927" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.WriteScenarioWithMultilineParamterToOutput" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="WriteScenarioWithMultilineParamterToOutput" time="0.0001193" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.WithAllSkippedSteps" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="WithAllSkippedSteps" time="0.0000878" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.RunSync" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="RunSync" time="0.000087" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAScenario.RunSyncWithAsyncStep" type="xBDD.Core.Test.Features.RunTests.RunAScenario" method="RunSyncWithAsyncStep" time="0.0000828" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAStep.SkipSync" type="xBDD.Core.Test.Features.RunTests.RunAStep" method="SkipSync" time="0.0001748" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAStep.PassSync" type="xBDD.Core.Test.Features.RunTests.RunAStep" method="PassSync" time="0.0000854" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAStep.PassAsync" type="xBDD.Core.Test.Features.RunTests.RunAStep" method="PassAsync" time="0.0005903" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAStep.SkipBecauseOfPreviousSkipSync" type="xBDD.Core.Test.Features.RunTests.RunAStep" method="SkipBecauseOfPreviousSkipSync" time="0.0000961" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAStep.ReusableStepThatUsesObjectCreatedInPreviousStep" type="xBDD.Core.Test.Features.RunTests.RunAStep" method="ReusableStepThatUsesObjectCreatedInPreviousStep" time="0.0158786" result="Pass">
        <output><![CDATA[Reusable Step That Uses Object Created In Previous Step
    the following method
        using Xunit;
        using xBDD.Model;

        namespace xBDD.Core.Test.Features.RunTests.SampleCode
        {
            public class WebPage
            {
                public string Title { get; set; }
                public WebPage Click(string buttonName) { return new WebPage() { Title = "Registration" }; }
                public static WebPage NavigateTo(string url) { return new WebPage(); }
            }

            public class AddAReusableStepThatUsesObjectCreatedInPreviousStep
            {
                public Scenario Add(Wrapper<int> count)
                {
                    Wrapper<WebPage> sut = new Wrapper<WebPage>();
                    var scenario = xBDD.CurrentRun
                        .AddScenario(this)
                        .Given(WebUser.NavigatesToPage("http://www.myUrl.com", sut, count))
                        .When(WebUser.ClicksTheButton("Register", sut, count))
                        .Then(WebPageTarget.WillHaveATitleOf("Registration", sut, count));

                    scenario.Run();

                    return scenario.Scenario;
                }
            }

            public static class WebUser
            {
                internal static Step NavigatesToPage(string url, Wrapper<WebPage> widget, Wrapper<int> count)
                {
                    return xBDD.CreateStep("the user navigates to page",
                        (s) =>
                        {
                            widget.Object = WebPage.NavigateTo(url);
                            count.Object++;
                        });
                }

                internal static Step ClicksTheButton(string name, Wrapper<WebPage> sut, Wrapper<int> count)
                {
                    return xBDD.CreateStep("the user clicks the '" + name + "' button",
                        (s) =>
                        {
                            sut.Object = sut.Object.Click(name);
                            count.Object++;
                        });
                }
            }
            public class WebPageTarget
            {
                internal static Step WillHaveATitleOf(string expectedName, Wrapper<WebPage> sut, Wrapper<int> count)
                {
                    return xBDD.CreateStep("the web page will have a title of '" + expectedName + "'",
                        (s) =>
                        {
                            Assert.Equal(expectedName, sut.Object.Title);
                            count.Object++;
                        });
                }
            }
        }
    the method is executed
    the count should be 3
    the scenario will have an outcome of 'Passed'
]]></output>
      </test>
      <test name="xBDD.Core.Test.Features.RunTests.RunAStep.FailSync" type="xBDD.Core.Test.Features.RunTests.RunAStep" method="FailSync" time="0.0001942" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAStep.SkipBecauseOfPreviousSkipAsync" type="xBDD.Core.Test.Features.RunTests.RunAStep" method="SkipBecauseOfPreviousSkipAsync" time="0.0006241" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAStep.SkipAsync" type="xBDD.Core.Test.Features.RunTests.RunAStep" method="SkipAsync" time="0.0007602" result="Pass" />
      <test name="xBDD.Core.Test.Features.RunTests.RunAStep.FailAsync" type="xBDD.Core.Test.Features.RunTests.RunAStep" method="FailAsync" time="0.0005736" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideAreaPath.WithAnAttribute" type="xBDD.Core.Test.Features.OverrideNames.OverrideAreaPath" method="WithAnAttribute" time="0.0001767" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideAreaPath.WhenAdding" type="xBDD.Core.Test.Features.OverrideNames.OverrideAreaPath" method="WhenAdding" time="0.0000988" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideFeatureName.WithAnAttribute" type="xBDD.Core.Test.Features.OverrideNames.OverrideFeatureName" method="WithAnAttribute" time="0.0001668" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideFeatureName.WhenAdding" type="xBDD.Core.Test.Features.OverrideNames.OverrideFeatureName" method="WhenAdding" time="0.0000885" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideScenarioName.WhenAdding" type="xBDD.Core.Test.Features.OverrideNames.OverrideScenarioName" method="WhenAdding" time="0.0001648" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideScenarioName.WithAnAttribute" type="xBDD.Core.Test.Features.OverrideNames.OverrideScenarioName" method="WithAnAttribute" time="0.00009" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideStepName.WithMultilineParameterSet" type="xBDD.Core.Test.Features.OverrideNames.OverrideStepName" method="WithMultilineParameterSet" time="0.0002147" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideStepName.WhenAdding" type="xBDD.Core.Test.Features.OverrideNames.OverrideStepName" method="WhenAdding" time="0.0000961" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideStepName.WhenAddingWithThenStart" type="xBDD.Core.Test.Features.OverrideNames.OverrideStepName" method="WhenAddingWithThenStart" time="0.0001212" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideStepName.WhenAddingWithGivenStart" type="xBDD.Core.Test.Features.OverrideNames.OverrideStepName" method="WhenAddingWithGivenStart" time="0.0000904" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideStepName.WhenAddingWithWhenStart" type="xBDD.Core.Test.Features.OverrideNames.OverrideStepName" method="WhenAddingWithWhenStart" time="0.0000881" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideStepName.WithParameterQuotes" type="xBDD.Core.Test.Features.OverrideNames.OverrideStepName" method="WithParameterQuotes" time="0.0000858" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideStepName.WithMultipleParameterReplacement" type="xBDD.Core.Test.Features.OverrideNames.OverrideStepName" method="WithMultipleParameterReplacement" time="0.0000972" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideStepName.WithAnAttribute" type="xBDD.Core.Test.Features.OverrideNames.OverrideStepName" method="WithAnAttribute" time="0.0000995" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideStepName.AtRunTime" type="xBDD.Core.Test.Features.OverrideNames.OverrideStepName" method="AtRunTime" time="0.0000828" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideStepName.WithParameterReplacement" type="xBDD.Core.Test.Features.OverrideNames.OverrideStepName" method="WithParameterReplacement" time="0.000087" result="Pass" />
      <test name="xBDD.Core.Test.Features.OverrideNames.OverrideStepName.WhenAddingWithAndStart" type="xBDD.Core.Test.Features.OverrideNames.OverrideStepName" method="WhenAddingWithAndStart" time="0.000082" result="Pass" />
      <test name="xBDD.Core.Test.Features.DefineScenarios.AddAScenario.WithExplicitName" type="xBDD.Core.Test.Features.DefineScenarios.AddAScenario" method="WithExplicitName" time="0.0018431" result="Pass">
        <output><![CDATA[With Explicit Name
    the following method
        namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
        {
            public class AddAScenarioExplicitNameSample
            {
                public ScenarioBuilder WithExplicitName()
                {
                    return xBDD.CurrentRun.AddScenario("My Explicit Scenario Name", this);
                }
            }
        }
    the method is executed
    the scenario will be created
    the scenario name will match the method name with spaces: 'My Explicit Scenario Name'
    the feature name will match the class name with spaces: 'Add A Scenario Explicit Name Sample'
    the area path will match the namespace: 'xBDD.Core.Test.Features.DefineScenarios.SampleCode'
]]></output>
      </test>
      <test name="xBDD.Core.Test.Features.DefineScenarios.AddAScenario.DefaultMethod" type="xBDD.Core.Test.Features.DefineScenarios.AddAScenario" method="DefaultMethod" time="0.0006082" result="Pass">
        <output><![CDATA[Default Method
    the following method
        namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
        {
            public class AddAScenarioDefaultSample
            {
                public ScenarioBuilder DefaultScenarioAdd()
                {
                    return xBDD.CurrentRun.AddScenario(this);
                }
            }
        }
    the method is executed
    the scenario will be created
    the scenario name will match the method name with spaces: 'Default Scenario Add'
    the feature name will match the class name with spaces: 'Add A Scenario Default Sample'
    the area path will match the namespace: 'xBDD.Core.Test.Features.DefineScenarios.SampleCode'
]]></output>
      </test>
      <test name="xBDD.Core.Test.Features.DefineScenarios.AddAStep.And" type="xBDD.Core.Test.Features.DefineScenarios.AddAStep" method="And" time="0.0038343" result="Pass">
        <output><![CDATA[And
    the following method
        namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
        {
            public class AddAnAndStep
            {
                public ScenarioBuilder Add()
                {
                    return xBDD.CurrentRun
                        .AddScenario(this)
                        .Given(xBDD.CreateStep("my starting condition", (s) => { /*my action here*/ }))
                        .When(xBDD.CreateStep("my action", (s) => { /*my action here*/ }))
                        .Then(xBDD.CreateStep("my ending condition", (s) => { /*my validation here*/ }))
                        .And(xBDD.CreateStep("my extra ending condition", (s) => { /*my extra validation here*/ }));
                }
            }
        }
    the method is executed
    the scenario will be created
    the scenario will have a step at position 4
    the step name will be 'my extra ending condition'
    the full step name will be 'And my extra ending condition'
    the step will have an action defined
    the step action type will be And
]]></output>
      </test>
      <test name="xBDD.Core.Test.Features.DefineScenarios.AddAStep.ReusableStep" type="xBDD.Core.Test.Features.DefineScenarios.AddAStep" method="ReusableStep" time="0.0009574" result="Pass">
        <output><![CDATA[Reusable Step
    the following method
        using xBDD.Model;

        namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
        {
            public class AddAReusableStep
            {
                public ScenarioBuilder Add()
                {
                    return xBDD.CurrentRun
                        .AddScenario(this)
                        .Given(User.PerformsAnAction());
                }
            }

            public static class User
            {
                public static Step PerformsAnAction()
                {
                    return xBDD.CreateStep("the user performs an action",
                        (s) =>
                        {
                            //my action here.
                        });
                }
            }
        }
    the method is executed
    the scenario will have a step at position 1
    the step name will be 'the user performs an action'
]]></output>
      </test>
      <test name="xBDD.Core.Test.Features.DefineScenarios.AddAStep.When" type="xBDD.Core.Test.Features.DefineScenarios.AddAStep" method="When" time="0.0009176" result="Pass">
        <output><![CDATA[When
    the following method
        namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
        {
            public class AddAWhenStep
            {
                public ScenarioBuilder Add()
                {
                    return xBDD.CurrentRun
                        .AddScenario(this)
                        .Given(xBDD.CreateStep("my starting condition", (s) => { /*my setup here*/ }))
                        .When(xBDD.CreateStep("my action", (s) => { /*my action here*/ }));
                }
            }
        }
    the method is executed
    the scenario will be created
    the scenario will have a step at position 2
    the step name will be 'my action'
    the full step name will be 'When my action'
    the step will have an action defined
    the step action type will be When
]]></output>
      </test>
      <test name="xBDD.Core.Test.Features.DefineScenarios.AddAStep.ReusableStepThatTakesAStaticParameter" type="xBDD.Core.Test.Features.DefineScenarios.AddAStep" method="ReusableStepThatTakesAStaticParameter" time="0.0009331" result="Pass">
        <output><![CDATA[Reusable Step That Takes A Static Parameter
    the following method
        using xBDD.Model;

        namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
        {
            public class AddAReusableStepThatTakesAStaticParameter
            {
                public ScenarioBuilder Add()
                {
                    return xBDD.CurrentRun
                        .AddScenario(this)
                        .Given(ParameterUser.PerformsAnAction("save"));
                }
            }

            public static class ParameterUser
            {
                public static Step PerformsAnAction(string actionType)
                {
                    return xBDD.CreateStep("the user performs a '"+actionType+"' action",
                        (s) =>
                        {
                            //my action here.
                        });
                }
            }
        }
    the method is executed
    the scenario will have a step at position 1
    the step name will be 'the user performs a 'save' action'
]]></output>
      </test>
      <test name="xBDD.Core.Test.Features.DefineScenarios.AddAStep.Async" type="xBDD.Core.Test.Features.DefineScenarios.AddAStep" method="Async" time="0.0014612" result="Pass">
        <output><![CDATA[Async
    the following method
        using System.Threading.Tasks;

        namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
        {
            public class AddAnAsyncStep
            {
                public ScenarioBuilder Add()
                {
                    return xBDD.CurrentRun
                        .AddScenario(this)
                        .Given(xBDD.CreateAsyncStep("my async starting condition", (s) => { return Task.Run(() => { }); }));
                }
            }
        }
    the method is executed
    the scenario will be created
    the scenario will have a step at position 1
    the step name will be 'my async starting condition'
    the full step name will be 'Given my async starting condition'
    the step will have an async action defined
    the step action type will be Given
]]></output>
      </test>
      <test name="xBDD.Core.Test.Features.DefineScenarios.AddAStep.GivenWithNoAction" type="xBDD.Core.Test.Features.DefineScenarios.AddAStep" method="GivenWithNoAction" time="0.0008043" result="Pass">
        <output><![CDATA[Given With No Action
    the following method
        namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
        {
            public class AddAGivenStepWithNoAction
            {
                public ScenarioBuilder Add()
                {
                    return xBDD.CurrentRun
                        .AddScenario(this)
                        .Given(xBDD.CreateStep("my starting condition that needs no action"));
                }
            }
        }
    the method is executed
    the scenario will be created
    the scenario will have a step at position 1
    the step name will be 'my starting condition that needs no action'
    the full step name will be 'Given my starting condition that needs no action'
    the step will have an action defined
    the step action type will be Given
]]></output>
      </test>
      <test name="xBDD.Core.Test.Features.DefineScenarios.AddAStep.Then" type="xBDD.Core.Test.Features.DefineScenarios.AddAStep" method="Then" time="0.0010848" result="Pass">
        <output><![CDATA[Then
    the following method
        namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
        {
            public class AddAThenStep
            {
                public ScenarioBuilder Add()
                {
                    return xBDD.CurrentRun
                        .AddScenario(this)
                        .Given(xBDD.CreateStep("my starting condition", (s) => { /*my setup here*/ }))
                        .When(xBDD.CreateStep("my action", (s) => { /*my action here*/ }))
                        .Then(xBDD.CreateStep("my ending condition", (s) => { /*my validation here*/ }));
                }
            }
        }
    the method is executed
    the scenario will be created
    the scenario will have a step at position 3
    the step name will be 'my ending condition'
    the full step name will be 'Then my ending condition'
    the step will have an action defined
    the step action type will be Then
]]></output>
      </test>
      <test name="xBDD.Core.Test.Features.DefineScenarios.AddAStep.Given" type="xBDD.Core.Test.Features.DefineScenarios.AddAStep" method="Given" time="0.0008659" result="Pass">
        <output><![CDATA[Given
    the following method
        namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
        {
            public class AddAGivenStep
            {
                public ScenarioBuilder Add()
                {
                    return xBDD.CurrentRun
                        .AddScenario(this)
                        .Given(xBDD.CreateStep("my starting condition", (s) => { /*my action here*/ }));
                }
            }
        }
    the method is executed
    the scenario will be created
    the scenario will have a step at position 1
    the step name will be 'my starting condition'
    the full step name will be 'Given my starting condition'
    the step will have an action defined
    the step action type will be Given
]]></output>
      </test>
      <test name="xBDD.Core.Test.Features.DefineScenarios.CreateATestRun.ThroughxBDDCurrentTestRun" type="xBDD.Core.Test.Features.DefineScenarios.CreateATestRun" method="ThroughxBDDCurrentTestRun" time="0.0001725" result="Pass" />
      <test name="xBDD.Core.Test.Features.DefineScenarios.CreateATestRun.Manually" type="xBDD.Core.Test.Features.DefineScenarios.CreateATestRun" method="Manually" time="0.0000893" result="Pass" />
      <test name="xBDD.Core.Test.Features.DefineScenarios.CreateATestRun.ThroughxBDDCurrentTestRun2Times" type="xBDD.Core.Test.Features.DefineScenarios.CreateATestRun" method="ThroughxBDDCurrentTestRun2Times" time="0.0000896" result="Pass" />
      <test name="xBDD.Core.Test.Features.DefineScenarios.OrganizeSteps.InAStepLibrary" type="xBDD.Core.Test.Features.DefineScenarios.OrganizeSteps" method="InAStepLibrary" time="0.000171" result="Pass" />
      <test name="xBDD.Core.Test.Features.DefineScenarios.OrganizeSteps.InAStepLibrarySharedAcrossAreas" type="xBDD.Core.Test.Features.DefineScenarios.OrganizeSteps" method="InAStepLibrarySharedAcrossAreas" time="0.0000927" result="Pass" />
      <test name="xBDD.Core.Test.Features.DefineScenarios.SpecifyParameters.MultilineParameter" type="xBDD.Core.Test.Features.DefineScenarios.SpecifyParameters" method="MultilineParameter" time="0.0001839" result="Pass" />
      <test name="xBDD.Core.Test.Features.DefineScenarios.SpecifyParameters.InlineWithDynamicState" type="xBDD.Core.Test.Features.DefineScenarios.SpecifyParameters" method="InlineWithDynamicState" time="0.0000946" result="Pass" />
      <test name="xBDD.Core.Test.Features.DefineScenarios.SpecifyParameters.InlineWithTypedState" type="xBDD.Core.Test.Features.DefineScenarios.SpecifyParameters" method="InlineWithTypedState" time="0.0000919" result="Pass" />
      <test name="xBDD.Core.Test.Features.DefineScenarios.SpecifyParameters.TableParameter" type="xBDD.Core.Test.Features.DefineScenarios.SpecifyParameters" method="TableParameter" time="0.0000843" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.CompileTestRunResults.EmptyTestRun" type="xBDD.Core.Test.Features.CompileStats.CompileTestRunResults" method="EmptyTestRun" time="0.0001679" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.CompileTestRunResults.WithAreaPathSpecified" type="xBDD.Core.Test.Features.CompileStats.CompileTestRunResults" method="WithAreaPathSpecified" time="0.0000912" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.CompileTestRunResults.CompletedTestRun" type="xBDD.Core.Test.Features.CompileStats.CompileTestRunResults" method="CompletedTestRun" time="0.0000893" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentAreaPassedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentAreaPassedCount" time="0.0001907" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.FeatureFailedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="FeatureFailedCount" time="0.0001064" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.Time" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="Time" time="0.0000908" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentScenarioPassedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentScenarioPassedCount" time="0.0001139" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.StepPassedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="StepPassedCount" time="0.0000885" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.Duration" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="Duration" time="0.0000854" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.AreaPassedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="AreaPassedCount" time="0.0001193" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentStepTotalCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentStepTotalCount" time="0.0000881" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentFeatureSkippedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentFeatureSkippedCount" time="0.0000896" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.AreaFailedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="AreaFailedCount" time="0.0000847" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.FeatureSkippedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="FeatureSkippedCount" time="0.0000847" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentFeatureTotalCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentFeatureTotalCount" time="0.0001063" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentFeaturePassedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentFeaturePassedCount" time="0.0000957" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentScenarioFailedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentScenarioFailedCount" time="0.0001197" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.FeaturePassedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="FeaturePassedCount" time="0.0000866" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.FeatureTotalCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="FeatureTotalCount" time="0.0000824" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentAreaFailedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentAreaFailedCount" time="0.0000869" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.StepTotalCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="StepTotalCount" time="0.0000824" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.ScenarioPassedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="ScenarioPassedCount" time="0.0000843" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentStepFailedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentStepFailedCount" time="0.0000839" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.EndTime" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="EndTime" time="0.0000832" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.StepFailedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="StepFailedCount" time="0.0000862" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentAreaSkippedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentAreaSkippedCount" time="0.0000835" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.StartTime" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="StartTime" time="0.0000877" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.ScenarioFailedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="ScenarioFailedCount" time="0.0000843" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentAreaTotalCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentAreaTotalCount" time="0.0000854" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.AreaTotalCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="AreaTotalCount" time="0.0000919" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.StepSkippedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="StepSkippedCount" time="0.0000831" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.ScenarioTotalCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="ScenarioTotalCount" time="0.0000812" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.AreaSkippedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="AreaSkippedCount" time="0.0000847" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.Outcome" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="Outcome" time="0.0000809" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.ScenarioSkippedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="ScenarioSkippedCount" time="0.0000854" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentFeatureFailedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentFeatureFailedCount" time="0.0000828" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentStepSkippedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentStepSkippedCount" time="0.0000858" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentScenarioTotalCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentScenarioTotalCount" time="0.0000824" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentScenarioSkippedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentScenarioSkippedCount" time="0.0000896" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewAreaStats.DescendentStepPassedCount" type="xBDD.Core.Test.Features.CompileStats.ViewAreaStats" method="DescendentStepPassedCount" time="0.000087" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats.ScenarioFailedCount" type="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats" method="ScenarioFailedCount" time="0.0002862" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats.ScenarioSkippedCount" type="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats" method="ScenarioSkippedCount" time="0.0001429" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats.EndTime" type="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats" method="EndTime" time="0.0001082" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats.Time" type="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats" method="Time" time="0.0001067" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats.Outcome" type="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats" method="Outcome" time="0.0001037" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats.StepTotalCount" type="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats" method="StepTotalCount" time="0.0001059" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats.Duration" type="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats" method="Duration" time="0.0001284" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats.ScenarioTotalCount" type="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats" method="ScenarioTotalCount" time="0.0001014" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats.StepFailedCount" type="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats" method="StepFailedCount" time="0.0001037" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats.StepPassedCount" type="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats" method="StepPassedCount" time="0.0001018" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats.StartTime" type="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats" method="StartTime" time="0.0000998" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats.StepSkippedCount" type="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats" method="StepSkippedCount" time="0.0001116" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats.ScenarioPassedCount" type="xBDD.Core.Test.Features.CompileStats.ViewFeatureStats" method="ScenarioPassedCount" time="0.0001306" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats.Duration" type="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats" method="Duration" time="0.0002211" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats.StartTime" type="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats" method="StartTime" time="0.0001097" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats.StepSkippedCount" type="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats" method="StepSkippedCount" time="0.0001417" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats.StepTotalCount" type="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats" method="StepTotalCount" time="0.0001052" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats.EndTime" type="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats" method="EndTime" time="0.0000998" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats.Outcome" type="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats" method="Outcome" time="0.0000987" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats.StepPassedCount" type="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats" method="StepPassedCount" time="0.0000976" result="Pass" />
      <test name="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats.StepFailedCount" type="xBDD.Core.Test.Features.CompileStats.ViewScenarioStats" method="StepFailedCount" time="0.000101" result="Pass" />
    </collection>
  </assembly>
</assemblies>