xBDD.Core.Test 2015-09-30T17:36:33

xBDD.Core.Test.Features.CompileStats
	Compile Test Run Results
		Completed Test Run [Skipped - Not Started]
		Empty Test Run [Skipped - Not Started]
		With Area Path Specified [Skipped - Not Started]
	View Area Stats
		Area Failed Count [Skipped - Not Started]
		Area Passed Count [Skipped - Not Started]
		Area Skipped Count [Skipped - Not Started]
		Area Total Count [Skipped - Not Started]
		Descendent Area Failed Count [Skipped - Not Started]
		Descendent Area Passed Count [Skipped - Not Started]
		Descendent Area Skipped Count [Skipped - Not Started]
		Descendent Area Total Count [Skipped - Not Started]
		Descendent Feature Failed Count [Skipped - Not Started]
		Descendent Feature Passed Count [Skipped - Not Started]
		Descendent Feature Skipped Count [Skipped - Not Started]
		Descendent Feature Total Count [Skipped - Not Started]
		Descendent Scenario Failed Count [Skipped - Not Started]
		Descendent Scenario Passed Count [Skipped - Not Started]
		Descendent Scenario Skipped Count [Skipped - Not Started]
		Descendent Scenario Total Count [Skipped - Not Started]
		Descendent Step Failed Count [Skipped - Not Started]
		Descendent Step Passed Count [Skipped - Not Started]
		Descendent Step Skipped Count [Skipped - Not Started]
		Descendent Step Total Count [Skipped - Not Started]
		Duration [Skipped - Not Started]
		End Time [Skipped - Not Started]
		Feature Failed Count [Skipped - Not Started]
		Feature Passed Count [Skipped - Not Started]
		Feature Skipped Count [Skipped - Not Started]
		Feature Total Count [Skipped - Not Started]
		Outcome [Skipped - Not Started]
		Scenario Failed Count [Skipped - Not Started]
		Scenario Passed Count [Skipped - Not Started]
		Scenario Skipped Count [Skipped - Not Started]
		Scenario Total Count [Skipped - Not Started]
		Start Time [Skipped - Not Started]
		Step Failed Count [Skipped - Not Started]
		Step Passed Count [Skipped - Not Started]
		Step Skipped Count [Skipped - Not Started]
		Step Total Count [Skipped - Not Started]
		Time [Skipped - Not Started]
	View Feature Stats
		Duration [Skipped - Not Started]
		End Time [Skipped - Not Started]
		Outcome [Skipped - Not Started]
		Scenario Failed Count [Skipped - Not Started]
		Scenario Passed Count [Skipped - Not Started]
		Scenario Skipped Count [Skipped - Not Started]
		Scenario Total Count [Skipped - Not Started]
		Start Time [Skipped - Not Started]
		Step Failed Count [Skipped - Not Started]
		Step Passed Count [Skipped - Not Started]
		Step Skipped Count [Skipped - Not Started]
		Step Total Count [Skipped - Not Started]
		Time [Skipped - Not Started]
	View Scenario Stats
		Duration [Skipped - Not Started]
		End Time [Skipped - Not Started]
		Outcome [Skipped - Not Started]
		Start Time [Skipped - Not Started]
		Step Failed Count [Skipped - Not Started]
		Step Passed Count [Skipped - Not Started]
		Step Skipped Count [Skipped - Not Started]
		Step Total Count [Skipped - Not Started]
xBDD.Core.Test.Features.DefineScenarios
	Add A Scenario
		Default Method
			Given the following method
				namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
				{
				    public class AddAScenarioDefaultSample
				    {
				        public ScenarioBuilder DefaultScenarioAdd()
				        {
				            return xBDD.CurrentRun.AddScenario(this);
				        }
				    }
				}
			When the method is executed
			Then the scenario will be created
			And the scenario name will match the method name with spaces: 'Default Scenario Add'
			And the feature name will match the class name with spaces: 'Add A Scenario Default Sample'
			And the area path will match the namespace: 'xBDD.Core.Test.Features.DefineScenarios.SampleCode'
		With Explicit Name
			Given the following method
				namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
				{
				    public class AddAScenarioExplicitNameSample
				    {
				        public ScenarioBuilder WithExplicitName()
				        {
				            return xBDD.CurrentRun.AddScenario("My Explicit Scenario Name", this);
				        }
				    }
				}
			When the method is executed
			Then the scenario will be created
			And the scenario name will match the method name with spaces: 'My Explicit Scenario Name'
			And the feature name will match the class name with spaces: 'Add A Scenario Explicit Name Sample'
			And the area path will match the namespace: 'xBDD.Core.Test.Features.DefineScenarios.SampleCode'
	Add A Step
		And
			Given the following method
				namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
				{
				    public class AddAnAndStep
				    {
				        public ScenarioBuilder Add()
				        {
				            return xBDD.CurrentRun
				                .AddScenario(this)
				                .Given(xBDD.CreateStep("my starting condition", (s) => { /*my action here*/ }))
				                .When(xBDD.CreateStep("my action", (s) => { /*my action here*/ }))
				                .Then(xBDD.CreateStep("my ending condition", (s) => { /*my validation here*/ }))
				                .And(xBDD.CreateStep("my extra ending condition", (s) => { /*my extra validation here*/ }));
				        }
				    }
				}
			When the method is executed
			Then the scenario will be created
			And the scenario will have a step at position 4
			And the step name will be 'my extra ending condition'
			And the full step name will be 'And my extra ending condition'
			And the step will have an action defined
			And the step action type will be And
		Async
			Given the following method
				using System.Threading.Tasks;
				
				namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
				{
				    public class AddAnAsyncStep
				    {
				        public ScenarioBuilder Add()
				        {
				            return xBDD.CurrentRun
				                .AddScenario(this)
				                .Given(xBDD.CreateAsyncStep("my async starting condition", (s) => { return Task.Run(() => { }); }));
				        }
				    }
				}
			When the method is executed
			Then the scenario will be created
			And the scenario will have a step at position 1
			And the step name will be 'my async starting condition'
			And the full step name will be 'Given my async starting condition'
			And the step will have an async action defined
			And the step action type will be Given
		Given
			Given the following method
				namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
				{
				    public class AddAGivenStep
				    {
				        public ScenarioBuilder Add()
				        {
				            return xBDD.CurrentRun
				                .AddScenario(this)
				                .Given(xBDD.CreateStep("my starting condition", (s) => { /*my action here*/ }));
				        }
				    }
				}
			When the method is executed
			Then the scenario will be created
			And the scenario will have a step at position 1
			And the step name will be 'my starting condition'
			And the full step name will be 'Given my starting condition'
			And the step will have an action defined
			And the step action type will be Given
		Given With No Action
			Given the following method
				namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
				{
				    public class AddAGivenStepWithNoAction
				    {
				        public ScenarioBuilder Add()
				        {
				            return xBDD.CurrentRun
				                .AddScenario(this)
				                .Given(xBDD.CreateStep("my starting condition that needs no action"));
				        }
				    }
				}
			When the method is executed
			Then the scenario will be created
			And the scenario will have a step at position 1
			And the step name will be 'my starting condition that needs no action'
			And the full step name will be 'Given my starting condition that needs no action'
			And the step will have an action defined
			And the step action type will be Given
		Reusable Step
			Given the following method
				using xBDD.Model;
				
				namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
				{
				    public class AddAReusableStep
				    {
				        public ScenarioBuilder Add()
				        {
				            return xBDD.CurrentRun
				                .AddScenario(this)
				                .Given(User.PerformsAnAction());
				        }
				    }
				
				    public static class User
				    {
				        public static Step PerformsAnAction()
				        {
				            return xBDD.CreateStep("the user performs an action",
				                (s) =>
				                {
				                    //my action here.
				                });
				        }
				    }
				}
			When the method is executed
			And the scenario will have a step at position 1
			And the step name will be 'the user performs an action'
		Reusable Step That Takes A Static Parameter
			Given the following method
				using xBDD.Model;
				
				namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
				{
				    public class AddAReusableStepThatTakesAStaticParameter
				    {
				        public ScenarioBuilder Add()
				        {
				            return xBDD.CurrentRun
				                .AddScenario(this)
				                .Given(ParameterUser.PerformsAnAction("save"));
				        }
				    }
				
				    public static class ParameterUser
				    {
				        public static Step PerformsAnAction(string actionType)
				        {
				            return xBDD.CreateStep("the user performs a '"+actionType+"' action",
				                (s) =>
				                {
				                    //my action here.
				                });
				        }
				    }
				}
			When the method is executed
			And the scenario will have a step at position 1
			And the step name will be 'the user performs a 'save' action'
		Then
			Given the following method
				namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
				{
				    public class AddAThenStep
				    {
				        public ScenarioBuilder Add()
				        {
				            return xBDD.CurrentRun
				                .AddScenario(this)
				                .Given(xBDD.CreateStep("my starting condition", (s) => { /*my setup here*/ }))
				                .When(xBDD.CreateStep("my action", (s) => { /*my action here*/ }))
				                .Then(xBDD.CreateStep("my ending condition", (s) => { /*my validation here*/ }));
				        }
				    }
				}
			When the method is executed
			Then the scenario will be created
			And the scenario will have a step at position 3
			And the step name will be 'my ending condition'
			And the full step name will be 'Then my ending condition'
			And the step will have an action defined
			And the step action type will be Then
		When
			Given the following method
				namespace xBDD.Core.Test.Features.DefineScenarios.SampleCode
				{
				    public class AddAWhenStep
				    {
				        public ScenarioBuilder Add()
				        {
				            return xBDD.CurrentRun
				                .AddScenario(this)
				                .Given(xBDD.CreateStep("my starting condition", (s) => { /*my setup here*/ }))
				                .When(xBDD.CreateStep("my action", (s) => { /*my action here*/ }));
				        }
				    }
				}
			When the method is executed
			Then the scenario will be created
			And the scenario will have a step at position 2
			And the step name will be 'my action'
			And the full step name will be 'When my action'
			And the step will have an action defined
			And the step action type will be When
	Create A Test Run
		Manually [Skipped - Re-writing]
		Throughx BDD Current Test Run [Skipped - Re-writing]
		Throughx BDD Current Test Run2Times [Skipped - Re-writing]
	Organize Steps
		In A Step Library [Skipped - Not Started]
		In A Step Library Shared Across Areas [Skipped - Not Started]
	Specify Parameters
		Inline With Dynamic State [Skipped - Not Started]
		Inline With Typed State [Skipped - Not Started]
		Multiline Parameter [Skipped - Not Started]
		Table Parameter [Skipped - Not Started]
xBDD.Core.Test.Features.DefineScenarios.SampleCode
	Add A Given Step
		Add [NotRun]
			Given my starting condition
	Add A Given Step With No Action
		Add [NotRun]
			Given my starting condition that needs no action
	Add A Reusable Step
		Add [NotRun]
			Given the user performs an action
	Add A Reusable Step That Takes A Static Parameter
		Add [NotRun]
			Given the user performs a 'save' action
	Add A Scenario Default Sample
		Default Scenario Add [NotRun]
	Add A Scenario Explicit Name Sample
		My Explicit Scenario Name [NotRun]
	Add A Then Step
		Add [NotRun]
			Given my starting condition
			When my action
			Then my ending condition
	Add A When Step
		Add [NotRun]
			Given my starting condition
			When my action
	Add An And Step
		Add [NotRun]
			Given my starting condition
			When my action
			Then my ending condition
			And my extra ending condition
	Add An Async Step
		Add [NotRun]
			Given my async starting condition
xBDD.Core.Test.Features.OverrideNames
	Override Area Path
		When Adding [Skipped - Not Started]
		With An Attribute [Skipped - Not Started]
	Override Feature Name
		When Adding [Skipped - Not Started]
		With An Attribute [Skipped - Not Started]
	Override Scenario Name
		When Adding [Skipped - Not Started]
		With An Attribute [Skipped - Not Started]
	Override Step Name
		At Run Time [Skipped - Not Started]
		When Adding [Skipped - Not Started]
		When Adding With And Start [Skipped - Not Started]
		When Adding With Given Start [Skipped - Not Started]
		When Adding With Then Start [Skipped - Not Started]
		When Adding With When Start [Skipped - Not Started]
		With An Attribute [Skipped - Not Started]
		With Multiline Parameter Set [Skipped - Re-writing]
		With Multiple Parameter Replacement [Skipped - Re-writing]
		With Parameter Quotes [Skipped - Not Started]
		With Parameter Replacement [Skipped - Re-writing]
xBDD.Core.Test.Features.RunTests
	Run A Scenario
		Run Async [Skipped - Re-writing]
		Run No Steps [Skipped - Re-writing]
		Run Sync [Skipped - Re-writing]
		Run Sync With Async Step [Skipped - Re-writing]
		Skip [Skipped - Re-writing]
		Skip Async [Skipped - Re-writing]
		Skip Async Null Reason [Skipped - Re-writing]
		Skip Null Reason [Skipped - Re-writing]
		With All Passing Steps [Skipped - Re-writing]
		With All Skipped Steps [Skipped - Re-writing]
		With One Failing Step And Preceeding Passing Steps [Skipped - Re-writing]
		With One Middle Failing Step And The Rest Passing [Skipped - Re-writing]
		With One Middle Not Implemented Step And The Rest Passing [Skipped - Re-writing]
		With One Middle Skipped Step And The Rest Passing [Skipped - Re-writing]
		Write Scenario To Output [Skipped - Re-writing]
		Write Scenario With Multiline Paramter To Output [Skipped - Re-writing]
	Run A Step
		Fail Async [Skipped - Re-writing]
		Fail Sync [Skipped - Re-writing]
		Pass Async [Skipped - Re-writing]
		Pass Sync [Skipped - Re-writing]
		Reusable Step That Uses Object Created In Previous Step
			Given the following method
				using Xunit;
				using xBDD.Model;
				
				namespace xBDD.Core.Test.Features.RunTests.SampleCode
				{
				    public class WebPage
				    {
				        public string Title { get; set; }
				        public WebPage Click(string buttonName) { return new WebPage() { Title = "Registration" }; }
				        public static WebPage NavigateTo(string url) { return new WebPage(); }
				    }
				
				    public class AddAReusableStepThatUsesObjectCreatedInPreviousStep
				    {
				        public Scenario Add(Wrapper<int> count)
				        {
				            Wrapper<WebPage> sut = new Wrapper<WebPage>();
				            var scenario = xBDD.CurrentRun
				                .AddScenario(this)
				                .Given(WebUser.NavigatesToPage("http://www.myUrl.com", sut, count))
				                .When(WebUser.ClicksTheButton("Register", sut, count))
				                .Then(WebPageTarget.WillHaveATitleOf("Registration", sut, count));
				
				            scenario.Run();
				
				            return scenario.Scenario;
				        }
				    }
				
				    public static class WebUser
				    {
				        internal static Step NavigatesToPage(string url, Wrapper<WebPage> widget, Wrapper<int> count)
				        {
				            return xBDD.CreateStep("the user navigates to page",
				                (s) =>
				                {
				                    widget.Object = WebPage.NavigateTo(url);
				                    count.Object++;
				                });
				        }
				
				        internal static Step ClicksTheButton(string name, Wrapper<WebPage> sut, Wrapper<int> count)
				        {
				            return xBDD.CreateStep("the user clicks the '" + name + "' button",
				                (s) =>
				                {
				                    sut.Object = sut.Object.Click(name);
				                    count.Object++;
				                });
				        }
				    }
				    public class WebPageTarget
				    {
				        internal static Step WillHaveATitleOf(string expectedName, Wrapper<WebPage> sut, Wrapper<int> count)
				        {
				            return xBDD.CreateStep("the web page will have a title of '" + expectedName + "'",
				                (s) =>
				                {
				                    Assert.Equal(expectedName, sut.Object.Title);
				                    count.Object++;
				                });
				        }
				    }
				}
			When the method is executed
			Then the count should be 3
			And the scenario will have an outcome of 'Passed'
		Skip Async [Skipped - Re-writing]
		Skip Because Of Previous Skip Async [Skipped - Re-writing]
		Skip Because Of Previous Skip Sync [Skipped - Re-writing]
		Skip Sync [Skipped - Re-writing]
xBDD.Core.Test.Features.RunTests.SampleCode
	Add A Reusable Step That Uses Object Created In Previous Step
		Add
			Given the user navigates to page
			When the user clicks the 'Register' button
			Then the web page will have a title of 'Registration'
xBDD.Core.Test.Features.ViewProperties
	View Scenario Properties
		Area Path [Skipped - Not Started]
		End Time [Skipped - Re-writing]
		Feature Name [Skipped - Not Started]
		Name [Skipped - Not Started]
		Outcome [Skipped - Re-writing]
		Start Time [Skipped - Re-writing]
		State [Skipped - Not Started]
		Steps [Skipped - Not Started]
		Total Time [Skipped - Re-writing]
	View Step Properties
		Action Type [Skipped - Not Started]
		End Time [Skipped - Not Started]
		Exception [Skipped - Not Started]
		Inline Parameters [Skipped - Not Started]
		Multiline Parameter [Skipped - Not Started]
		Name [Skipped - Not Started]
		Outcome [Skipped - Not Started]
		Reason [Skipped - Not Started]
		Start Time [Skipped - Not Started]
		State [Skipped - Not Started]
		Table Parameter [Skipped - Not Started]
