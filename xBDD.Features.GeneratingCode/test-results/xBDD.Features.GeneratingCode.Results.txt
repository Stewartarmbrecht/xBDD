xBDD - Generating Code

xBDD - Features - Generating Code - Generating Project Files [Passed]
	For An MS Test Project [Passed]
		In An Empty Directory [Passed]
			Given you have an empty directory
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/MyGeneratedSample.Features.csproj' that matches the template:
				<Project Sdk="Microsoft.NET.Sdk">
				
					<PropertyGroup>
						<TargetFramework>netcoreapp2.1</TargetFramework>
						<IsPackable>false</IsPackable>
					</PropertyGroup>
				
					<ItemGroup>
						<PackageReference Include="Microsoft.Extensions.Configuration" Version="2.1.1" />
						<PackageReference Include="Microsoft.Extensions.Configuration.EnvironmentVariables" Version="2.1.1" />
						<PackageReference Include="Microsoft.Net.Test.Sdk" Version="15.8.0" />
						<PackageReference Include="MSTEst.TestAdapter" Version="1.3.2" />
						<PackageReference Include="MSTEst.TestFramework" Version="1.3.2" />
						<PackageReference Include="Selenium.WebDriver.ChromeDriver" Version="2.41.0" />
						<PackageReference Include="Selenium.WebDriver" Version="3.14.0" />
						<PackageReference Include="xBDD" Version="0.0.8-alpha" />
					</ItemGroup>
				
					<ItemGroup>
						<None Update="xBDDConfig.json" CopyToOutputDirectory="PreserveNewest" />
					</ItemGroup>
				
				</Project>
			And you will find a file at './MyGeneratedSample.Features/MyGeneratedSample.Features.csproj.xbdd' that matches the template:
				<Project Sdk="Microsoft.NET.Sdk">
				
					<PropertyGroup>
						<TargetFramework>netcoreapp2.1</TargetFramework>
						<IsPackable>false</IsPackable>
					</PropertyGroup>
				
					<ItemGroup>
						<PackageReference Include="Microsoft.Extensions.Configuration" Version="2.1.1" />
						<PackageReference Include="Microsoft.Extensions.Configuration.EnvironmentVariables" Version="2.1.1" />
						<PackageReference Include="Microsoft.Net.Test.Sdk" Version="15.8.0" />
						<PackageReference Include="MSTEst.TestAdapter" Version="1.3.2" />
						<PackageReference Include="MSTEst.TestFramework" Version="1.3.2" />
						<PackageReference Include="Selenium.WebDriver.ChromeDriver" Version="2.41.0" />
						<PackageReference Include="Selenium.WebDriver" Version="3.14.0" />
						<PackageReference Include="xBDD" Version="0.0.8-alpha" />
					</ItemGroup>
				
					<ItemGroup>
						<None Update="xBDDConfig.json" CopyToOutputDirectory="PreserveNewest" />
					</ItemGroup>
				
				</Project>
			And you will find a file at './MyGeneratedSample.Features/xBDDConfig.json' that matches the template:
				{
					"TestRunReport": {
						"ReportName": "My Generated Sample - Features",
						"ReportFolder": "/../../../test-results/",
						"FileName": "MyGeneratedSample.Features.Results",
						"FailuresOnly": "false",
						"RootNameSkip": "My Generated Sample - Features - "
					},
					"SortedReasonConfigurations": [
						{"Reason": "Removing","BackgroundColor": "rgb(124,124,124)","FontColor": "White"},
						{"Reason": "Passed","BackgroundColor": "rgb(112,173,71)","FontColor": "White"},
						{"Reason": "Untested","BackgroundColor": "rgb(195,155,225)","FontColor": "rgb(15, 1, 26)"},
						{"Reason": "Committed","BackgroundColor": "rgb(46,117,182)","FontColor": "White"},
						{"Reason": "Ready","BackgroundColor": "rgb(101, 167, 227)","FontColor": "rgb(2, 20, 36)"},
						{"Reason": "Defining","BackgroundColor": "rgb(146, 194, 238)","FontColor": "rgb(7, 36, 63)"},
						{"Reason": "Failed","BackgroundColor": "rgb(192,0,0)","FontColor": "White"}
					],
					"Browser": {
						"Watch": "false"
					}
				}
			And you will find a file at './MyGeneratedSample.Features/xBDDFeatureBase.xbdd.cs' that matches the template:
				namespace MyGeneratedSample.Features
				{
					using xBDD;
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using Microsoft.VisualStudio.TestTools.UnitTesting.Logging;
				
				
					public partial class xBDDFeatureBase: IFeature, IOutputWriter
					{
						public IOutputWriter OutputWriter { get { return this; } }
				
						public void WriteLine(string text) {
							text = text.Replace("{", "{{").Replace("}","}}");
							Logger.LogMessage(text);
						}
					}
				}
			And you will find a file at './MyGeneratedSample.Features/xBDDFeatureImport.txt' that matches the template:
				MyImportedCapability1
					MyImportedFeature
						MyImportedScenario #R-Ready
							Given you have the xbdd tools installed
							And you have an xBDDFeatureImport.txt file defined in the root of the project
							When you execute 'dotnet xbdd project generate MSTest'
							Then a new feature will be defined in the project with two partial class files
							And you can finish the import by moving the scenarios from the feature.xbdd.cs file to the feature.cs file
							And you can delete the .xbdd.cs file and clear out the xBDDFeatureImport.txt file of the feature
			And you will find a file at './MyGeneratedSample.Features/xBDDInitializeAndComplete.cs' that matches the template:
				namespace MyGeneratedSample.Features
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using Microsoft.VisualStudio.TestTools.UnitTesting.Logging;
					using xBDD;
				
					[TestClass]
					public class TestSetupAndBreakdown
					{
				
						[AssemblyInitialize]
						public static void TestRunStart(TestContext context)
						{
							xB.Initialize();
						}
						[AssemblyCleanup()]
						public static void TestRunComplete()
						{
							xB.Complete("xBDDConfig.json", new xBDDSorting().GetSortedFeatureNames(), (message) => { Logger.LogMessage(message); });
						}
					}
				}
			And you will find a file at './MyGeneratedSample.Features/xBDDSorting.cs' that matches the template:
				namespace MyGeneratedSample.Features
				{
					using System;
					using System.Collections.Generic;
					using xBDD;
				
					public partial class xBDDSorting: ISorting
					{
						public List<string> GetSortedFeatureNames() {
							return new List<string>() {
								typeof(MyGeneratedSample.Features.MyCapability.MyFeature).FullName,
							};
						}
						public List<string> GetSortedReasons() {
							return new List<string>() {
								"Removing",
								"Untested",
								"Committed",
								"Ready",
								"Defining",
							};
						}
					}
				}
			And you will find a file at './MyGeneratedSample.Features/xBDDSorting.xbdd.cs' that matches the template:
				namespace MyGeneratedSample.Features
				{
					using System;
					using System.Collections.Generic;
					using xBDD;
				
					public partial class xBDDSorting: ISorting
					{
						public List<string> GetGeneratedSortedFeatureNames() {
							return new List<string>() {
								typeof(MyGeneratedSample.Features.MyCapability.MyFeature).FullName,
							};
						}
						public List<string> GetGeneratedReasons() {
							return new List<string>() {
								"Removing",
								"Untested",
								"Committed",
								"Ready",
								"Defining",
							};
						}
					}
				}
			And you will find a file at './MyGeneratedSample.Features/Features/MyCapability/MyFeature.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					[AsA("sample user")]
					[YouCan("execute my feature")]
					[SoThat("you have my feature value")]
					[Explanation(@"
						# My Explanation
						This is a
						multiline explanation of the feature.
						**And it uses markdown!**")]
					public partial class MyFeature: xBDDFeatureBase
					{
				
						[TestMethod]
						[Explanation("This is an explanation of the scenario.")]
						public async Task MyScenario()
						{
							await xB.CurrentRun.AddScenario(this, 1)
								.Given("my step 1", (s) => { 
				
									//Add code to perform action.
				
								})
								.When("my step 2 with multiline input", (s) => { 
				
									//Add code to perform action.
				
									}, @"
										Here 
										is 
										my 
										Input!".RemoveIndentation(6, true), TextFormat.text
								)
								.And("my step 3 with an explanation", (s) => { 
				
									//Add code to perform action.
				
									}, null, TextFormat.text, @"
										# Step 3 Explanation 
										This is a multiline explanation of 
										Step 3.  It uses markdown.  It will
										be printed out along with the step name in the
										html report."
								)
								.Then("my step 3 with output", (s) => { 
				
									//Add code to perform action.
				
									s.Output = "Here is my output.";
									s.OutputFormat = TextFormat.text;
				
								})
								.Run();
						}
					}
				}
			And you will find the project execute tests with the 'dotnet test' command
				dotnet test
			And you will find an HTML Report file located at './MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.html'.
				./MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.html
			And you will find a JSON Report file located at './MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.json'.
				./MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.json
			And you will find a Text Report file located at './MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.txt'.
				./MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.txt
			And you will find a Text Outline Report file located at './MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.Outline.txt'.
				./MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.Outline.txt
			And you will find a OPML Outline Report file located at './MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.opml'.
				./MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.opml
		In An Initialized XBDD [Passed]
			Given you have an empty directory
			When you run the command:
				dotnet xbdd project generate MSTest
			And you modify all the standard project files
				MyGeneratedSample.Features/MyGeneratedSample.Features.csproj,
				MyGeneratedSample.Features/MyGeneratedSample.Features.csproj.xbdd,
				MyGeneratedSample.Features/xBddFeatureBase.xbdd.cs,
				MyGeneratedSample.Features/xBddSorting.cs,
				MyGeneratedSample.Features/xBddSorting.xbdd.cs,
				MyGeneratedSample.Features/xBddConfig.json,
				MyGeneratedSample.Features/xBddFeatureImport.txt,
				MyGeneratedSample.Features/xBddInitializeAndComplete.cs,
				MyGeneratedSample.Features/Features/MyCapability/MyFeature.cs
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find the files ending in xbdd.[ext] or xbdd are overwritten
				MyGeneratedSample.Features/MyGeneratedSample.Features.csproj,
				MyGeneratedSample.Features/MyGeneratedSample.Features.csproj.xbdd,
				MyGeneratedSample.Features/xBddFeatureBase.xbdd.cs,
				MyGeneratedSample.Features/xBddSorting.cs,
				MyGeneratedSample.Features/xBddSorting.xbdd.cs,
				MyGeneratedSample.Features/xBddConfig.json,
				MyGeneratedSample.Features/xBddFeatureImport.txt,
				MyGeneratedSample.Features/xBddInitializeAndComplete.cs,
				MyGeneratedSample.Features/Features/MyCapability/MyFeature.cs
			And you will find the files not ending in xbdd.[ext] or xbdd are not overwritten
				MyGeneratedSample.Features/MyGeneratedSample.Features.csproj,
				MyGeneratedSample.Features/MyGeneratedSample.Features.csproj.xbdd,
				MyGeneratedSample.Features/xBddFeatureBase.xbdd.cs,
				MyGeneratedSample.Features/xBddSorting.cs,
				MyGeneratedSample.Features/xBddSorting.xbdd.cs,
				MyGeneratedSample.Features/xBddConfig.json,
				MyGeneratedSample.Features/xBddFeatureImport.txt,
				MyGeneratedSample.Features/xBddInitializeAndComplete.cs,
				MyGeneratedSample.Features/Features/MyCapability/MyFeature.cs
			And you will find the sample feature file is not modified because the xbdd backlog file already exists
				MyGeneratedSample.Features/MyGeneratedSample.Features.csproj,
				MyGeneratedSample.Features/MyGeneratedSample.Features.csproj.xbdd,
				MyGeneratedSample.Features/xBddFeatureBase.xbdd.cs,
				MyGeneratedSample.Features/xBddSorting.cs,
				MyGeneratedSample.Features/xBddSorting.xbdd.cs,
				MyGeneratedSample.Features/xBddConfig.json,
				MyGeneratedSample.Features/xBddFeatureImport.txt,
				MyGeneratedSample.Features/xBddInitializeAndComplete.cs,
				MyGeneratedSample.Features/Features/MyCapability/MyFeature.cs
			And you will find the project execute tests with the 'dotnet test' command
				dotnet test
			And you will find an HTML Report file located at './MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.html'.
				./MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.html
			And you will find a JSON Report file located at './MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.json'.
				./MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.json
			And you will find a Text Report file located at './MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.txt'.
				./MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.txt
			And you will find a Text Outline Report file located at './MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.Outline.txt'.
				./MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.Outline.txt
			And you will find a OPML Outline Report file located at './MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.opml'.
				./MyGeneratedSample.Features/test-results/MyGeneratedSample.Features.Results.opml
		With A Test Run Name [Passed]
			Given you have an empty directory
			When you run the command:
				dotnet xbdd project generate MSTest --testrun-name My Sample Test Run
			And you will find a file at './MyGeneratedSample.Features/xBDDConfig.json' that matches the template:
				{
					"TestRunReport": {
						"ReportName": "My Sample Test Run",
						"ReportFolder": "/../../../test-results/",
						"FileName": "MyGeneratedSample.Features.Results",
						"FailuresOnly": "false",
						"RootNameSkip": "My Generated Sample - Features - "
					},
					"SortedReasonConfigurations": [
						{"Reason": "Removing","BackgroundColor": "rgb(124,124,124)","FontColor": "White"},
						{"Reason": "Passed","BackgroundColor": "rgb(112,173,71)","FontColor": "White"},
						{"Reason": "Untested","BackgroundColor": "rgb(195,155,225)","FontColor": "rgb(15, 1, 26)"},
						{"Reason": "Committed","BackgroundColor": "rgb(46,117,182)","FontColor": "White"},
						{"Reason": "Ready","BackgroundColor": "rgb(101, 167, 227)","FontColor": "rgb(2, 20, 36)"},
						{"Reason": "Defining","BackgroundColor": "rgb(146, 194, 238)","FontColor": "rgb(7, 36, 63)"},
						{"Reason": "Failed","BackgroundColor": "rgb(192,0,0)","FontColor": "White"}
					],
					"Browser": {
						"Watch": "false"
					}
				}
		With Capability Name Clipping [Passed]
			Given you have an empty directory
			When you run the command:
				dotnet xbdd project generate MSTest --remove-from-capability-name Modified
			And you will find a file at './MyGeneratedSample.Features/xBDDConfig.json' that matches the template:
				{
					"TestRunReport": {
						"ReportName": "My Generated Sample - Features",
						"ReportFolder": "/../../../test-results/",
						"FileName": "MyGeneratedSample.Features.Results",
						"FailuresOnly": "false",
						"RootNameSkip": "Modified"
					},
					"SortedReasonConfigurations": [
						{"Reason": "Removing","BackgroundColor": "rgb(124,124,124)","FontColor": "White"},
						{"Reason": "Passed","BackgroundColor": "rgb(112,173,71)","FontColor": "White"},
						{"Reason": "Untested","BackgroundColor": "rgb(195,155,225)","FontColor": "rgb(15, 1, 26)"},
						{"Reason": "Committed","BackgroundColor": "rgb(46,117,182)","FontColor": "White"},
						{"Reason": "Ready","BackgroundColor": "rgb(101, 167, 227)","FontColor": "rgb(2, 20, 36)"},
						{"Reason": "Defining","BackgroundColor": "rgb(146, 194, 238)","FontColor": "rgb(7, 36, 63)"},
						{"Reason": "Failed","BackgroundColor": "rgb(192,0,0)","FontColor": "White"}
					],
					"Browser": {
						"Watch": "false"
					}
				}
xBDD - Features - Generating Code - Generating Feature Files - Using An Xbdd Feature Import File [Passed]
	With An Invalid Outline [Passed]
		With Invalid Characters In Capability Name [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My $%^& Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1 #R-Committed @Stewart #T-LoveIT
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My Scenario 1 #R-Committed @Jane #T-HateIT
							Explanation
								Here is my 
								scenario explanation
							Given step 1
								Explanation
									Here is my 
									step explanation
								Input
									Here is my 
									step input
							When step 2
							Then step 3
							And step 4
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An capability is defined with invalid characters in the name.
				Line 1: 'My Capability 1 - My $%^& Sub Capability 1'
				Explanation: An capability name must start with a letter and can only contain
				             letters, numbers, spaces, underscores, and ' - '.
				             The ' - ' string is converted to '.' to define the features 
				             namespace in the test project.
		With Invalid Characters In Feature Name [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My $%^& Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My Scenario 1
							Explanation
								Here is my 
								scenario explanation
							Given step 1
								Explanation
									Here is my 
									step explanation
								Input
									Here is my 
									step input
							When step 2
							Then step 3
							And step 4
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: A feature is defined with invalid characters in the name.
				Line 6: 'My $%^& Feature 1'
				Explanation: A feature name must start with a letter and can only contain
				             letters, numbers, spaces, and underscores.
		With Invalid Characters In Scenario Name [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1 #R-Committed @Stewart #T-LoveIT
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My $%^& Scenario 1
							Explanation
								Here is my 
								scenario explanation
							Given step 1
								Explanation
									Here is my 
									step explanation
								Input
									Here is my 
									step input
							When step 2
							Then step 3
							And step 4
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: A scenario is defined with invalid characters in the name.
				Line 15: 'My $%^& Scenario 1'
				Explanation: A scenario name must start with a letter and can only contain
				             letters, numbers, spaces, and underscores.
		With Empty Feature Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My Scenario 1 #R-Committed @Stewart #T-LoveIT
							Explanation
								Here is my 
								scenario explanation
							Given step 1
								Explanation
									Here is my 
									step explanation
								Input
									Here is my 
									step input
							When step 2
							Then step 3
							And step 4
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: Line 6: A feature is defined with no name.
		With Empty Scenario Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						
							Explanation
								Here is my 
								scenario explanation
							Given step 1
								Explanation
									Here is my 
									step explanation
								Input
									Here is my 
									step input
							When step 2
							Then step 3
							And step 4
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: Line 15: A scenario is defined with no name.
		With Empty Step Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My Scenario 1
							Explanation
								Here is my 
								scenario explanation
							Given step 1
								Explanation
									Here is my 
									step explanation
								Input
									Here is my 
									step input
							When step 2
							
							And step 4
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: Line 27: A step is defined with no name.
		With Step Input Header On Last Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My Scenario 1
							Explanation
								Here is my 
								scenario explanation
							Given step 1
								Explanation
									Here is my 
									step explanation
								Input
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'No Line' is following a step input header.
				Line 23: ''
				Explanation: A step input header line can only be followed by an indented input line.
		With Step Explanation Header On Last Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My Scenario 1
							Explanation
								Here is my 
								scenario explanation
							Given step 1
								Explanation
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'No Line' is following a step explanation header.
				Line 20: ''
				Explanation: A step explanation header line can only be followed by an indented 
				             explanation line.
		With Scenario Explanation Header On Last Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My Scenario 1
							Explanation
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'No Line' is following an scenario explanation header line.
				Line 16: ''
				Explanation: A scenario explanation header line can only be followed by an indented 
				             explanation line.
		With Feature Explanation On Last Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'No Line' is following a feature explanation line.
				Line 13: ''
				Explanation: A Feature explanation line can only be followed by another explanation 
				             line, a feature statement header line or an outdented (2x) scenario line.
		With Feature Explanation Header On Last Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'No Line' is following a feature explanation header line.
				Line 11: ''
				Explanation: A feature explanation header line can only be followed by an indented 
				             explanation line.
		With Feature Statement On Last Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'No Line' is following a feature Statement line.
				Line 10: ''
				Explanation: A feature statement line can only be followed by another statement line, 
				             a feature explanation header line or an outdented (2x) scenario line.
		With Feature Statement Header On Last Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'No Line' is following a feature statement header line.
				Line 7: ''
				Explanation: A feature statement header line can only be followed by an indented 
				             statement line.
		With Feature On Last Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'No Line' following a feature line.
				Line 6: ''
				Explanation: A feature line can only be followed by an indented scenario name, indented
				             'Explanation' header or indented 'Statement' header.
		With Capability Explanation On Last Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'No Line' is following an capability explanation line.
				Line 4: ''
				Explanation: An capability explanation line can only be followed by another explanation line 
				             or an outdented (2x) feature line.
		With Capability Explanation Header On Last Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'No Line' is following an capability explanation header line.
				Line 2: ''
				Explanation: An capability explanation header line can only be followed by an indented 
				             explanation line.
		With Capability On Last Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'No Line' is following an capability line.
				Line 1: ''
				Explanation: An capability line can only be followed by an indented 'Explanation' header or 
				             indented Feature line.
		With No Lines [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: The file is empty.
		With Invalid Line After Step Input Header [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My Scenario 1
							Explanation
								Here is my 
								scenario explanation
							Given step 1
								Explanation
									Here is my 
									step explanation
								Input
							When step 2 Is Invalid Line
							Then step 3
							And step 4
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'Step' is following a step input header.
				Line 24: '			When step 2 Is Invalid Line'
				Explanation: A step input header line can only be followed by an indented input line.
		With Invalid Line After Step Explanation Header [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My Scenario 1
							Explanation
								Here is my 
								scenario explanation
							Given step 1
								Explanation
								Input
									Here is the
									Step input 
							When step 2
							Then step 3
							And step 4
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'StepInputHeader' is following a step explanation header.
				Line 21: '				Input'
				Explanation: A step explanation header line can only be followed by an indented 
				             explanation line.
		With Invalid Line After Step [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My Scenario 1
							Explanation
								Here is my 
								scenario explanation
							Given step 1
								Invalid Line
							When step 2
							Then step 3
							And step 4
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'Unknown' is following a step line.
				Line 20: '				Invalid Line'
				Explanation: A step line can only be followed by another step line or an indented 
				             'Explanation' or 'Input' header line, or outdented scenario, feature, or 
				             capability.
		With Invalid Step Line After Step [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My Scenario 1
							Explanation
								Here is my 
								scenario explanation
							Given step 1
							Invalid Line
							Then step 3
							And step 4
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: Invalid step starter.
				Line 20: 'Invalid Line'
				Explanation: A step can start with either 'Given', 'When', 'Then', 'And', or '.'
				             Steps that start with '.' will have it's text interpreted as literal code 
				             when generating feature classes.
		With Invalid Line After Scenario Explanation Header [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My Scenario 1
							Explanation
							Given step 1
							Then step 3
							And step 4
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'Step' is following an scenario explanation header line.
				Line 17: '			Given step 1'
				Explanation: A scenario explanation header line can only be followed by an indented 
				             explanation line.
		With Invalid Line After Scenario [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My Scenario 1
							Invalid Line
							Given step 1
							Then step 3
							And step 4
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: Invalid step starter.
				Line 16: 'Invalid Line'
				Explanation: A step can start with either 'Given', 'When', 'Then', 'And', or '.'
				             Steps that start with '.' will have it's text interpreted as literal code 
				             when generating feature classes.
		With Invalid Indented Step Line After Scenario [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
				
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
							Here is my 
							feature explanation
				
						My Scenario 1
								Given step 1
							Then step 3
							And step 4
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'Unknown' is following a scenario line.
				Line 16: '				Given step 1'
				Explanation: A scenario line can only be followed by another scenario line, an indented
				             'Explanation' header or indented step line, or an outdented feature or 
				             capability line.
		With Invalid Line After Feature Explanation Header [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
					My Feature 1
						Statement
							As a user
							So that you get some value
							You can do something
						Explanation
						My Scenario 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'Scenario' is following a feature explanation header line.
				Line 11: '		My Scenario 1'
				Explanation: A feature explanation header line can only be followed by an indented 
				             explanation line.
		With Invalid Line After Feature Statement Header [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
					My Feature 1
						Statement
						My Scenario 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'Scenario' is following a feature statement header line.
				Line 7: '		My Scenario 1'
				Explanation: A feature statement header line can only be followed by an indented 
				             statement line.
		With Invalid Line After Feature [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
						Here is 
						my explanation
					My Feature 1
					My Feature 2
						My Scenario 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'Feature' following a feature line.
				Line 6: '	My Feature 2'
				Explanation: A feature line can only be followed by an indented scenario name, indented
				             'Explanation' header or indented 'Statement' header.
		With Invalid Line After Capability Explanation Header [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					Explanation
					My Feature 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'Feature' is following an capability explanation header line.
				Line 3: '	My Feature 1'
				Explanation: An capability explanation header line can only be followed by an indented 
				             explanation line.
		With Invalid Line After Capability [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
				My Capability 1 - My Sub Capability 2
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'Capability' is following an capability line.
				Line 2: 'My Capability 1 - My Sub Capability 2'
				Explanation: An capability line can only be followed by an indented 'Explanation' header or 
				             indented Feature line.
		With Invalid Indented Line After Capability [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
						Invalid Line
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will see output matching the following template:
				{{.*}}/rl
				Error: An invalid line of type 'Scenario' is following an capability line.
				Line 2: '		Invalid Line'
				Explanation: An capability line can only be followed by an indented 'Explanation' header or 
				             indented Feature line.
	For An MS Test Project [Passed]
		With An Empty Scenario [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Given Step [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Given Step With Quotes [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given "My" Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("\"My\" Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A When Step [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1
							When Step 2
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.When("Step 2",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Then Step [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1
							When Step 2
							Then Step 3
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.When("Step 2",
									(s) => { 
										// Enter your code here.
									})
								.Then("Step 3",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With An And Step [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1
							When Step 2
							Then Step 3
							And Step 4
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.When("Step 2",
									(s) => { 
										// Enter your code here.
									})
								.Then("Step 3",
									(s) => { 
										// Enter your code here.
									})
								.And("Step 4",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Code Step [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1
							When Step 2
							Then Step 3
							And Step 4
							.And(this.IsSomeCode())
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.When("Step 2",
									(s) => { 
										// Enter your code here.
									})
								.Then("Step 3",
									(s) => { 
										// Enter your code here.
									})
								.And("Step 4",
									(s) => { 
										// Enter your code here.
									})
				//				.And(this.IsSomeCode())
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Step Input [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1
								Input
									Here Is
									My Multiline Input
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									},
									@"
										Here Is
										My Multiline Input".RemoveIndentation(6,true),
									TextFormat.text)
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Step Input With Quotes [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1
								Input
									Here Is
									"My" Multiline Input
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									},
									@"
										Here Is
										""My"" Multiline Input".RemoveIndentation(6,true),
									TextFormat.text)
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Step Input Single Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1
								Input
									Here Is My Single Line Input
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									},
									"Here Is My Single Line Input",
									TextFormat.text)
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Step Input Single Line With Quotes [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1
								Input
									Here Is "My" Single Line Input
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									},
									"Here Is \"My\" Single Line Input",
									TextFormat.text)
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Step Explanation [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1
								Explanation
									Here Is
									My Multiline Explanation
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									}, 
									null, 
									null,
									@"
										Here Is
										My Multiline Explanation".RemoveIndentation(6,true))
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Step Explanation With Quotes [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1
								Explanation
									Here Is
									"My" Multiline Explanation
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									}, 
									null, 
									null,
									@"
										Here Is
										""My"" Multiline Explanation".RemoveIndentation(6,true))
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Step Explanation Single Line [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1
								Explanation
									Here Is My Singleline Explanation
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									}, 
									null, 
									null,
									"Here Is My Singleline Explanation")
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Step Explanation Single Line With Quotes [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1
								Explanation
									Here Is "My" Singleline Explanation
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									}, 
									null, 
									null,
									"Here Is \"My\" Singleline Explanation")
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Step With Trailing Spaces [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1           
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1           ",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Scenario Explanation [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Explanation
								Here is my 
								multiline scenario 
								explanation
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						[Explanation(@"
							Here is my 
							multiline scenario 
							explanation",3)]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Scenario Explanation With Quotes [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Explanation
								Here is "my" 
								multiline scenario 
								explanation
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						[Explanation(@"
							Here is ""my"" 
							multiline scenario 
							explanation",3)]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Scenario With Trailing Spaces [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1          
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With Scenario Reason Tags [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1 #R-MyReason
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("MyReason", Assert.Inconclusive);
						}
				
					}
				}
		With Duplicate Scenario Reason Tags [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1 #R-MyReason1 #R-MyReason2
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("MyReason1", Assert.Inconclusive);
						}
				
					}
				}
		With Scenario Owner Tags [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1 @MyOwner1 @MyOwner2
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						[Assignments("MyOwner1","MyOwner2")]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With Scenario General Tags [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1 #T-MyTag1 #T-MyTag2
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						[Tags("MyTag1","MyTag2")]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With An Existing Feature [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			And you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
			And you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.xbdd.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Feature Explanation [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						Explanation
							Here is my 
							multiline feature 
							explanation
						My Scenario 1
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					[Explanation(@"
						Here is my 
						multiline feature 
						explanation",2)]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Feature Explanation With Quotes [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						Explanation
							Here is "my" 
							multiline feature 
							explanation
						My Scenario 1
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					[Explanation(@"
						Here is ""my"" 
						multiline feature 
						explanation",2)]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Feature Statement [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						Explanation
							Here is my 
							multiline feature 
							explanation
						Statement
							As a user
							So that you derive some value
							You can perform some action with the product
						My Scenario 1
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					[AsA("user")]
					[YouCan("perform some action with the product")]
					[SoThat("you derive some value")]
					[Explanation(@"
						Here is my 
						multiline feature 
						explanation",2)]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Feature With Trailing Spaces [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1     
						My Scenario 1
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Capability With Trailing Spaces [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1     
					My Feature 1
						My Scenario 1
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With Ignored Feature Reason Tags [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1 #R-IgnoredReasonTag
						My Scenario 1
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With Feature General Tags [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1 #T-MyFeatureTag #T-MyFeatureTag2
						My Scenario 1
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					[Tags("MyFeatureTag","MyFeatureTag2")]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With Feature Owner Tags [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1 @MyFeatureOwner1 @MyFeatureOwner2
						My Scenario 1
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					[Assignments("MyFeatureOwner1","MyFeatureOwner2")]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With Ignored Capability Tags [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1 #R-Ignored #T-Ignored @Ignored
					My Feature 1
						My Scenario 1
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With A Workflowy Text Export [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				- My Capability 1 - My Sub Capability 1
				  - My Feature 1
				    - My Scenario 1
				      - Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With Duplicate Capability And Feature [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 2
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Skip("Defining", Assert.Inconclusive);
						}
				
						[TestMethod]
						public async Task MyScenario2()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With Duplicate Capability And Feature Nonconsecutive [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
				My Capability 2 - My Sub Capability 1
					My Feature 1
						My Scenario 1
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 2
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Skip("Defining", Assert.Inconclusive);
						}
				
						[TestMethod]
						public async Task MyScenario2()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With Duplicate Capability [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 0
						My Scenario 1
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 2
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario2()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With Duplicate Feature [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
					My Feature 1
						My Scenario 2
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Skip("Defining", Assert.Inconclusive);
						}
				
						[TestMethod]
						public async Task MyScenario2()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With Duplicate Feature Nonconsecutive [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
					My Feature 2
						My Scenario 1
					My Feature 1
						My Scenario 2
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Skip("Defining", Assert.Inconclusive);
						}
				
						[TestMethod]
						public async Task MyScenario2()
						{
							await xB.AddScenario(this, 1000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With Duplicate Scenario [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
						My Scenario 1
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Skip("Defining", Assert.Inconclusive);
						}
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 2000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
		With Duplicate Scenario Nonconsecutive [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				My Capability 1 - My Sub Capability 1
					My Feature 1
						My Scenario 1
						My Scenario 2
						My Scenario 1
							Given Step 1
			When you run the command:
				dotnet xbdd project generate MSTest
			Then you will find a file at './MyGeneratedSample.Features/Features/MyCapability1/MySubCapability1/MyFeature1.cs' that matches the template:
				namespace MyGeneratedSample.Features.MyCapability1.MySubCapability1
				{
					using Microsoft.VisualStudio.TestTools.UnitTesting;
					using System;
					using System.Threading.Tasks;
					using xBDD;
					using xBDD.Utility;
				
					[TestClass]
					public partial class MyFeature1: xBDDFeatureBase
					{
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 1000)
								.Skip("Defining", Assert.Inconclusive);
						}
				
						[TestMethod]
						public async Task MyScenario2()
						{
							await xB.AddScenario(this, 2000)
								.Skip("Defining", Assert.Inconclusive);
						}
				
						[TestMethod]
						public async Task MyScenario1()
						{
							await xB.AddScenario(this, 3000)
								.Given("Step 1",
									(s) => { 
										// Enter your code here.
									})
								.Skip("Defining", Assert.Inconclusive);
						}
				
					}
				}
xBDD - Features - Generating Code - Generating Solution Files - Using An Xbdd Feature Import File [Defining]
		With A Valid Solution Definition [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
				Project: MyGeneratedSample.Features.Capability1
					My Capability A - My Sub Capability B
						My Feature C
							My Scenario D 
				Project: MyGeneratedSample.Features.Capability2
					My Capability E - My Sub Capability F
						My Feature G
							My Scenario H
			When you run the command:
				dotnet xbdd solution generate MSTest
			Then you will find a file at './MyGeneratedSample/MyGeneratedSample.Features.Capability1/xBddFeatureImport.txt' that matches the template:
				My Capability A - My Sub Capability B
					My Feature C
						My Scenario D 
			And you will find a file at './MyGeneratedSample/MyGeneratedSample.Features.Capability2/xBddFeatureImport.txt' that matches the template:
				My Capability E - My Sub Capability F
					My Feature G
						My Scenario H
		With No Projects [Passed]
			Given you have an empty directory
			And add a scenario outline file with the following content:
			When you run the command:
				dotnet xbdd solution generate MSTest
			Then you will see output matching the following template:
				Error: The first line must define a project. Ex. 'Project: My Project'.
		With An Existing Project That Has Modified Project Files [Defining]
